all_blocks	src\devices\block.c	/^static struct list all_blocks = LIST_INITIALIZER (all_blocks);$/;"	v	typeref:struct:list	file:
aux	src\devices\block.c	/^    void *aux;                          \/* Extra data owned by driver. *\/$/;"	m	struct:block	file:
block	src\devices\block.c	/^struct block$/;"	s	file:
block_by_role	src\devices\block.c	/^static struct block *block_by_role[BLOCK_ROLE_CNT];$/;"	v	typeref:struct:block	file:
block_first	src\devices\block.c	/^block_first (void)$/;"	f
block_get_by_name	src\devices\block.c	/^block_get_by_name (const char *name)$/;"	f
block_get_role	src\devices\block.c	/^block_get_role (enum block_type role)$/;"	f
block_name	src\devices\block.c	/^block_name (struct block *block)$/;"	f
block_next	src\devices\block.c	/^block_next (struct block *block)$/;"	f
block_print_stats	src\devices\block.c	/^block_print_stats (void)$/;"	f
block_read	src\devices\block.c	/^block_read (struct block *block, block_sector_t sector, void *buffer)$/;"	f
block_register	src\devices\block.c	/^block_register (const char *name, enum block_type type,$/;"	f
block_set_role	src\devices\block.c	/^block_set_role (enum block_type role, struct block *block)$/;"	f
block_size	src\devices\block.c	/^block_size (struct block *block)$/;"	f
block_type	src\devices\block.c	/^block_type (struct block *block)$/;"	f
block_type_name	src\devices\block.c	/^block_type_name (enum block_type type)$/;"	f
block_write	src\devices\block.c	/^block_write (struct block *block, block_sector_t sector, const void *buffer)$/;"	f
check_sector	src\devices\block.c	/^check_sector (struct block *block, block_sector_t sector)$/;"	f	file:
list_elem	src\devices\block.c	/^    struct list_elem list_elem;         \/* Element in all_blocks. *\/$/;"	m	struct:block	typeref:struct:block::list_elem	file:
list_elem_to_block	src\devices\block.c	/^list_elem_to_block (struct list_elem *list_elem)$/;"	f	file:
name	src\devices\block.c	/^    char name[16];                      \/* Block device name. *\/$/;"	m	struct:block	file:
ops	src\devices\block.c	/^    const struct block_operations *ops;  \/* Driver operations. *\/$/;"	m	struct:block	typeref:struct:block::block_operations	file:
read_cnt	src\devices\block.c	/^    unsigned long long read_cnt;        \/* Number of sectors read. *\/$/;"	m	struct:block	file:
size	src\devices\block.c	/^    block_sector_t size;                 \/* Size in sectors. *\/$/;"	m	struct:block	file:
type	src\devices\block.c	/^    enum block_type type;                \/* Type of block device. *\/$/;"	m	struct:block	typeref:enum:block::block_type	file:
write_cnt	src\devices\block.c	/^    unsigned long long write_cnt;       \/* Number of sectors written. *\/$/;"	m	struct:block	file:
BLOCK_CNT	src\devices\block.h	/^    BLOCK_CNT                    \/* Number of Pintos block types. *\/$/;"	e	enum:block_type
BLOCK_FILESYS	src\devices\block.h	/^    BLOCK_FILESYS,               \/* File system. *\/$/;"	e	enum:block_type
BLOCK_FOREIGN	src\devices\block.h	/^    BLOCK_FOREIGN,               \/* Owned by non-Pintos operating system. *\/$/;"	e	enum:block_type
BLOCK_KERNEL	src\devices\block.h	/^    BLOCK_KERNEL,                \/* Pintos OS kernel. *\/$/;"	e	enum:block_type
BLOCK_RAW	src\devices\block.h	/^    BLOCK_RAW = BLOCK_ROLE_CNT,  \/* "Raw" device with unidentified contents. *\/$/;"	e	enum:block_type
BLOCK_ROLE_CNT	src\devices\block.h	/^    BLOCK_ROLE_CNT,$/;"	e	enum:block_type
BLOCK_SCRATCH	src\devices\block.h	/^    BLOCK_SCRATCH,               \/* Scratch. *\/$/;"	e	enum:block_type
BLOCK_SECTOR_SIZE	src\devices\block.h	11;"	d
BLOCK_SWAP	src\devices\block.h	/^    BLOCK_SWAP,                  \/* Swap. *\/$/;"	e	enum:block_type
DEVICES_BLOCK_H	src\devices\block.h	2;"	d
PRDSNu	src\devices\block.h	19;"	d
block_operations	src\devices\block.h	/^struct block_operations$/;"	s
block_sector_t	src\devices\block.h	/^typedef uint32_t block_sector_t;$/;"	t
block_type	src\devices\block.h	/^enum block_type$/;"	g
read	src\devices\block.h	/^    void (*read) (void *aux, block_sector_t, void *buffer);$/;"	m	struct:block_operations
write	src\devices\block.h	/^    void (*write) (void *aux, block_sector_t, const void *buffer);$/;"	m	struct:block_operations
CHANNEL_CNT	src\devices\ide.c	79;"	d	file:
CMD_IDENTIFY_DEVICE	src\devices\ide.c	49;"	d	file:
CMD_READ_SECTOR_RETRY	src\devices\ide.c	50;"	d	file:
CMD_WRITE_SECTOR_RETRY	src\devices\ide.c	51;"	d	file:
CTL_SRST	src\devices\ide.c	39;"	d	file:
DEV_DEV	src\devices\ide.c	44;"	d	file:
DEV_LBA	src\devices\ide.c	43;"	d	file:
DEV_MBS	src\devices\ide.c	42;"	d	file:
STA_BSY	src\devices\ide.c	34;"	d	file:
STA_DRDY	src\devices\ide.c	35;"	d	file:
STA_DRQ	src\devices\ide.c	36;"	d	file:
ata_disk	src\devices\ide.c	/^struct ata_disk$/;"	s	file:
channel	src\devices\ide.c	/^    struct channel *channel;    \/* Channel that disk is attached to. *\/$/;"	m	struct:ata_disk	typeref:struct:ata_disk::channel	file:
channel	src\devices\ide.c	/^struct channel$/;"	s	file:
channels	src\devices\ide.c	/^static struct channel channels[CHANNEL_CNT];$/;"	v	typeref:struct:channel	file:
check_device_type	src\devices\ide.c	/^check_device_type (struct ata_disk *d) $/;"	f	file:
completion_wait	src\devices\ide.c	/^    struct semaphore completion_wait;   \/* Up'd by interrupt handler. *\/$/;"	m	struct:channel	typeref:struct:channel::semaphore	file:
descramble_ata_string	src\devices\ide.c	/^descramble_ata_string (char *string, int size) $/;"	f	file:
dev_no	src\devices\ide.c	/^    int dev_no;                 \/* Device 0 or 1 for master or slave. *\/$/;"	m	struct:ata_disk	file:
devices	src\devices\ide.c	/^    struct ata_disk devices[2];     \/* The devices on this channel. *\/$/;"	m	struct:channel	typeref:struct:channel::ata_disk	file:
expecting_interrupt	src\devices\ide.c	/^    bool expecting_interrupt;   \/* True if an interrupt is expected, false if$/;"	m	struct:channel	file:
ide_init	src\devices\ide.c	/^ide_init (void) $/;"	f
ide_operations	src\devices\ide.c	/^static struct block_operations ide_operations =$/;"	v	typeref:struct:block_operations	file:
ide_operations	src\devices\ide.c	/^static struct block_operations ide_operations;$/;"	v	typeref:struct:block_operations	file:
ide_read	src\devices\ide.c	/^ide_read (void *d_, block_sector_t sec_no, void *buffer)$/;"	f	file:
ide_write	src\devices\ide.c	/^ide_write (void *d_, block_sector_t sec_no, const void *buffer)$/;"	f	file:
identify_ata_device	src\devices\ide.c	/^identify_ata_device (struct ata_disk *d) $/;"	f	file:
input_sector	src\devices\ide.c	/^input_sector (struct channel *c, void *sector) $/;"	f	file:
interrupt_handler	src\devices\ide.c	/^interrupt_handler (struct intr_frame *f) $/;"	f	file:
irq	src\devices\ide.c	/^    uint8_t irq;                \/* Interrupt in use. *\/$/;"	m	struct:channel	file:
is_ata	src\devices\ide.c	/^    bool is_ata;                \/* Is device an ATA disk? *\/$/;"	m	struct:ata_disk	file:
issue_pio_command	src\devices\ide.c	/^issue_pio_command (struct channel *c, uint8_t command) $/;"	f	file:
lock	src\devices\ide.c	/^    struct lock lock;           \/* Must acquire to access the controller. *\/$/;"	m	struct:channel	typeref:struct:channel::lock	file:
name	src\devices\ide.c	/^    char name[8];               \/* Name, e.g. "hda". *\/$/;"	m	struct:ata_disk	file:
name	src\devices\ide.c	/^    char name[8];               \/* Name, e.g. "ide0". *\/$/;"	m	struct:channel	file:
output_sector	src\devices\ide.c	/^output_sector (struct channel *c, const void *sector) $/;"	f	file:
reg_alt_status	src\devices\ide.c	31;"	d	file:
reg_base	src\devices\ide.c	/^    uint16_t reg_base;          \/* Base I\/O port. *\/$/;"	m	struct:channel	file:
reg_command	src\devices\ide.c	25;"	d	file:
reg_ctl	src\devices\ide.c	30;"	d	file:
reg_data	src\devices\ide.c	17;"	d	file:
reg_device	src\devices\ide.c	23;"	d	file:
reg_error	src\devices\ide.c	18;"	d	file:
reg_lbah	src\devices\ide.c	22;"	d	file:
reg_lbal	src\devices\ide.c	20;"	d	file:
reg_lbam	src\devices\ide.c	21;"	d	file:
reg_nsect	src\devices\ide.c	19;"	d	file:
reg_status	src\devices\ide.c	24;"	d	file:
reset_channel	src\devices\ide.c	/^reset_channel (struct channel *c) $/;"	f	file:
select_device	src\devices\ide.c	/^select_device (const struct ata_disk *d)$/;"	f	file:
select_device_wait	src\devices\ide.c	/^select_device_wait (const struct ata_disk *d) $/;"	f	file:
select_sector	src\devices\ide.c	/^select_sector (struct ata_disk *d, block_sector_t sec_no)$/;"	f	file:
wait_until_idle	src\devices\ide.c	/^wait_until_idle (const struct ata_disk *d) $/;"	f	file:
wait_while_busy	src\devices\ide.c	/^wait_while_busy (const struct ata_disk *d) $/;"	f	file:
DEVICES_IDE_H	src\devices\ide.h	2;"	d
buffer	src\devices\input.c	/^static struct intq buffer;$/;"	v	typeref:struct:intq	file:
input_full	src\devices\input.c	/^input_full (void) $/;"	f
input_getc	src\devices\input.c	/^input_getc (void) $/;"	f
input_init	src\devices\input.c	/^input_init (void) $/;"	f
input_putc	src\devices\input.c	/^input_putc (uint8_t key) $/;"	f
DEVICES_INPUT_H	src\devices\input.h	2;"	d
intq_empty	src\devices\intq.c	/^intq_empty (const struct intq *q) $/;"	f
intq_full	src\devices\intq.c	/^intq_full (const struct intq *q) $/;"	f
intq_getc	src\devices\intq.c	/^intq_getc (struct intq *q) $/;"	f
intq_init	src\devices\intq.c	/^intq_init (struct intq *q) $/;"	f
intq_putc	src\devices\intq.c	/^intq_putc (struct intq *q, uint8_t byte) $/;"	f
next	src\devices\intq.c	/^next (int pos) $/;"	f	file:
signal	src\devices\intq.c	/^signal (struct intq *q UNUSED, struct thread **waiter) $/;"	f	file:
wait	src\devices\intq.c	/^wait (struct intq *q UNUSED, struct thread **waiter) $/;"	f	file:
DEVICES_INTQ_H	src\devices\intq.h	2;"	d
INTQ_BUFSIZE	src\devices\intq.h	21;"	d
buf	src\devices\intq.h	/^    uint8_t buf[INTQ_BUFSIZE];  \/* Buffer. *\/$/;"	m	struct:intq
head	src\devices\intq.h	/^    int head;                   \/* New data is written here. *\/$/;"	m	struct:intq
intq	src\devices\intq.h	/^struct intq$/;"	s
lock	src\devices\intq.h	/^    struct lock lock;           \/* Only one thread may wait at once. *\/$/;"	m	struct:intq	typeref:struct:intq::lock
not_empty	src\devices\intq.h	/^    struct thread *not_empty;   \/* Thread waiting for not-empty condition. *\/$/;"	m	struct:intq	typeref:struct:intq::thread
not_full	src\devices\intq.h	/^    struct thread *not_full;    \/* Thread waiting for not-full condition. *\/$/;"	m	struct:intq	typeref:struct:intq::thread
tail	src\devices\intq.h	/^    int tail;                   \/* Old data is read here. *\/$/;"	m	struct:intq
DATA_REG	src\devices\kbd.c	12;"	d	file:
caps_lock	src\devices\kbd.c	/^static bool caps_lock;$/;"	v	file:
chars	src\devices\kbd.c	/^    const char *chars;          \/* chars[0] has scancode first_scancode,$/;"	m	struct:keymap	file:
first_scancode	src\devices\kbd.c	/^    uint8_t first_scancode;     \/* First scancode. *\/$/;"	m	struct:keymap	file:
invariant_keymap	src\devices\kbd.c	/^static const struct keymap invariant_keymap[] = $/;"	v	typeref:struct:keymap	file:
kbd_init	src\devices\kbd.c	/^kbd_init (void) $/;"	f
kbd_print_stats	src\devices\kbd.c	/^kbd_print_stats (void) $/;"	f
key_cnt	src\devices\kbd.c	/^static int64_t key_cnt;$/;"	v	file:
keyboard_interrupt	src\devices\kbd.c	/^keyboard_interrupt (struct intr_frame *args UNUSED) $/;"	f	file:
keyboard_interrupt	src\devices\kbd.c	/^static intr_handler_func keyboard_interrupt;$/;"	v	file:
keymap	src\devices\kbd.c	/^struct keymap$/;"	s	file:
left_alt	src\devices\kbd.c	/^static bool left_alt, right_alt;        \/* Left and right Alt keys. *\/$/;"	v	file:
left_ctrl	src\devices\kbd.c	/^static bool left_ctrl, right_ctrl;      \/* Left and right Ctl keys. *\/$/;"	v	file:
left_shift	src\devices\kbd.c	/^static bool left_shift, right_shift;    \/* Left and right Shift keys. *\/$/;"	v	file:
map_key	src\devices\kbd.c	/^map_key (const struct keymap k[], unsigned scancode, uint8_t *c) $/;"	f	file:
right_alt	src\devices\kbd.c	/^static bool left_alt, right_alt;        \/* Left and right Alt keys. *\/$/;"	v	file:
right_ctrl	src\devices\kbd.c	/^static bool left_ctrl, right_ctrl;      \/* Left and right Ctl keys. *\/$/;"	v	file:
right_shift	src\devices\kbd.c	/^static bool left_shift, right_shift;    \/* Left and right Shift keys. *\/$/;"	v	file:
shifted_keymap	src\devices\kbd.c	/^static const struct keymap shifted_keymap[] = $/;"	v	typeref:struct:keymap	file:
unshifted_keymap	src\devices\kbd.c	/^static const struct keymap unshifted_keymap[] = $/;"	v	typeref:struct:keymap	file:
DEVICES_KBD_H	src\devices\kbd.h	2;"	d
block	src\devices\partition.c	/^    struct block *block;                \/* Underlying block device. *\/$/;"	m	struct:partition	typeref:struct:partition::block	file:
found_partition	src\devices\partition.c	/^found_partition (struct block *block, uint8_t part_type,$/;"	f	file:
partition	src\devices\partition.c	/^struct partition$/;"	s	file:
partition_operations	src\devices\partition.c	/^static struct block_operations partition_operations =$/;"	v	typeref:struct:block_operations	file:
partition_operations	src\devices\partition.c	/^static struct block_operations partition_operations;$/;"	v	typeref:struct:block_operations	file:
partition_read	src\devices\partition.c	/^partition_read (void *p_, block_sector_t sector, void *buffer)$/;"	f	file:
partition_scan	src\devices\partition.c	/^partition_scan (struct block *block)$/;"	f
partition_type_name	src\devices\partition.c	/^partition_type_name (uint8_t type)$/;"	f	file:
partition_write	src\devices\partition.c	/^partition_write (void *p_, block_sector_t sector, const void *buffer)$/;"	f	file:
read_partition_table	src\devices\partition.c	/^read_partition_table (struct block *block, block_sector_t sector,$/;"	f	file:
start	src\devices\partition.c	/^    block_sector_t start;               \/* First sector within device. *\/$/;"	m	struct:partition	file:
DEVICES_PARTITION_H	src\devices\partition.h	2;"	d
PIT_HZ	src\devices\pit.c	15;"	d	file:
PIT_PORT_CONTROL	src\devices\pit.c	11;"	d	file:
PIT_PORT_COUNTER	src\devices\pit.c	12;"	d	file:
pit_configure_channel	src\devices\pit.c	/^pit_configure_channel (int channel, int mode, int frequency)$/;"	f
DEVICES_PIT_H	src\devices\pit.h	2;"	d
CMOS_REG_IO	src\devices\rtc.c	11;"	d	file:
CMOS_REG_SET	src\devices\rtc.c	10;"	d	file:
RTCSA_UIP	src\devices\rtc.c	30;"	d	file:
RTCSB_24HR	src\devices\rtc.c	35;"	d	file:
RTCSB_DM	src\devices\rtc.c	34;"	d	file:
RTCSB_SET	src\devices\rtc.c	33;"	d	file:
RTC_REG_A	src\devices\rtc.c	24;"	d	file:
RTC_REG_B	src\devices\rtc.c	25;"	d	file:
RTC_REG_C	src\devices\rtc.c	26;"	d	file:
RTC_REG_D	src\devices\rtc.c	27;"	d	file:
RTC_REG_HOUR	src\devices\rtc.c	18;"	d	file:
RTC_REG_MDAY	src\devices\rtc.c	19;"	d	file:
RTC_REG_MIN	src\devices\rtc.c	17;"	d	file:
RTC_REG_MON	src\devices\rtc.c	20;"	d	file:
RTC_REG_SEC	src\devices\rtc.c	16;"	d	file:
RTC_REG_YEAR	src\devices\rtc.c	21;"	d	file:
bcd_to_bin	src\devices\rtc.c	/^bcd_to_bin (uint8_t x)$/;"	f	file:
cmos_read	src\devices\rtc.c	/^cmos_read (uint8_t index)$/;"	f	file:
rtc_get_time	src\devices\rtc.c	/^rtc_get_time (void)$/;"	f
RTC_H	src\devices\rtc.h	2;"	d
time_t	src\devices\rtc.h	/^typedef unsigned long time_t;$/;"	t
FCR_REG	src\devices\serial.c	31;"	d	file:
IER_RECV	src\devices\serial.c	37;"	d	file:
IER_REG	src\devices\serial.c	23;"	d	file:
IER_XMIT	src\devices\serial.c	38;"	d	file:
IIR_REG	src\devices\serial.c	30;"	d	file:
IO_BASE	src\devices\serial.c	18;"	d	file:
LCR_DLAB	src\devices\serial.c	42;"	d	file:
LCR_N81	src\devices\serial.c	41;"	d	file:
LCR_REG	src\devices\serial.c	32;"	d	file:
LSR_DR	src\devices\serial.c	48;"	d	file:
LSR_REG	src\devices\serial.c	34;"	d	file:
LSR_THRE	src\devices\serial.c	49;"	d	file:
LS_REG	src\devices\serial.c	26;"	d	file:
MCR_OUT2	src\devices\serial.c	45;"	d	file:
MCR_REG	src\devices\serial.c	33;"	d	file:
MS_REG	src\devices\serial.c	27;"	d	file:
POLL	src\devices\serial.c	/^static enum { UNINIT, POLL, QUEUE } mode;$/;"	e	enum:__anon1	file:
QUEUE	src\devices\serial.c	/^static enum { UNINIT, POLL, QUEUE } mode;$/;"	e	enum:__anon1	file:
RBR_REG	src\devices\serial.c	21;"	d	file:
THR_REG	src\devices\serial.c	22;"	d	file:
UNINIT	src\devices\serial.c	/^static enum { UNINIT, POLL, QUEUE } mode;$/;"	e	enum:__anon1	file:
init_poll	src\devices\serial.c	/^init_poll (void) $/;"	f	file:
mode	src\devices\serial.c	/^static enum { UNINIT, POLL, QUEUE } mode;$/;"	v	typeref:enum:__anon1	file:
putc_poll	src\devices\serial.c	/^putc_poll (uint8_t byte) $/;"	f	file:
serial_flush	src\devices\serial.c	/^serial_flush (void) $/;"	f
serial_init_queue	src\devices\serial.c	/^serial_init_queue (void) $/;"	f
serial_interrupt	src\devices\serial.c	/^serial_interrupt (struct intr_frame *f UNUSED) $/;"	f	file:
serial_interrupt	src\devices\serial.c	/^static intr_handler_func serial_interrupt;$/;"	v	file:
serial_notify	src\devices\serial.c	/^serial_notify (void) $/;"	f
serial_putc	src\devices\serial.c	/^serial_putc (uint8_t byte) $/;"	f
set_serial	src\devices\serial.c	/^set_serial (int bps)$/;"	f	file:
txq	src\devices\serial.c	/^static struct intq txq;$/;"	v	typeref:struct:intq	file:
write_ier	src\devices\serial.c	/^write_ier (void) $/;"	f	file:
DEVICES_SERIAL_H	src\devices\serial.h	2;"	d
CONTROL_REG	src\devices\shutdown.c	18;"	d	file:
how	src\devices\shutdown.c	/^static enum shutdown_type how = SHUTDOWN_NONE;$/;"	v	typeref:enum:shutdown_type	file:
print_stats	src\devices\shutdown.c	/^print_stats (void)$/;"	f	file:
shutdown	src\devices\shutdown.c	/^shutdown (void)$/;"	f
shutdown_configure	src\devices\shutdown.c	/^shutdown_configure (enum shutdown_type type)$/;"	f
shutdown_power_off	src\devices\shutdown.c	/^shutdown_power_off (void)$/;"	f
shutdown_reboot	src\devices\shutdown.c	/^shutdown_reboot (void)$/;"	f
DEVICES_SHUTDOWN_H	src\devices\shutdown.h	2;"	d
SHUTDOWN_NONE	src\devices\shutdown.h	/^    SHUTDOWN_NONE,              \/* Loop forever. *\/$/;"	e	enum:shutdown_type
SHUTDOWN_POWER_OFF	src\devices\shutdown.h	/^    SHUTDOWN_POWER_OFF,         \/* Power off the machine (if possible). *\/$/;"	e	enum:shutdown_type
SHUTDOWN_REBOOT	src\devices\shutdown.h	/^    SHUTDOWN_REBOOT,            \/* Reboot the machine (if possible). *\/$/;"	e	enum:shutdown_type
shutdown_type	src\devices\shutdown.h	/^enum shutdown_type$/;"	g
SPEAKER_GATE_ENABLE	src\devices\speaker.c	11;"	d	file:
SPEAKER_PORT_GATE	src\devices\speaker.c	8;"	d	file:
speaker_beep	src\devices\speaker.c	/^speaker_beep (void)$/;"	f
speaker_off	src\devices\speaker.c	/^speaker_off (void)$/;"	f
speaker_on	src\devices\speaker.c	/^speaker_on (int frequency)$/;"	f
DEVICES_SPEAKER_H	src\devices\speaker.h	2;"	d
busy_wait	src\devices\timer.c	/^busy_wait (int64_t loops) $/;"	f	file:
loops_per_tick	src\devices\timer.c	/^static unsigned loops_per_tick;$/;"	v	file:
real_time_delay	src\devices\timer.c	/^real_time_delay (int64_t num, int32_t denom)$/;"	f	file:
real_time_sleep	src\devices\timer.c	/^real_time_sleep (int64_t num, int32_t denom) $/;"	f	file:
ticks	src\devices\timer.c	/^static int64_t ticks;$/;"	v	file:
timer_calibrate	src\devices\timer.c	/^timer_calibrate (void) $/;"	f
timer_elapsed	src\devices\timer.c	/^timer_elapsed (int64_t then) $/;"	f
timer_init	src\devices\timer.c	/^timer_init (void) $/;"	f
timer_interrupt	src\devices\timer.c	/^static intr_handler_func timer_interrupt;$/;"	v	file:
timer_interrupt	src\devices\timer.c	/^timer_interrupt (struct intr_frame *args UNUSED)$/;"	f	file:
timer_mdelay	src\devices\timer.c	/^timer_mdelay (int64_t ms) $/;"	f
timer_msleep	src\devices\timer.c	/^timer_msleep (int64_t ms) $/;"	f
timer_ndelay	src\devices\timer.c	/^timer_ndelay (int64_t ns) $/;"	f
timer_nsleep	src\devices\timer.c	/^timer_nsleep (int64_t ns) $/;"	f
timer_print_stats	src\devices\timer.c	/^timer_print_stats (void) $/;"	f
timer_sleep	src\devices\timer.c	/^timer_sleep (int64_t ticks) $/;"	f
timer_ticks	src\devices\timer.c	/^timer_ticks (void) $/;"	f
timer_udelay	src\devices\timer.c	/^timer_udelay (int64_t us) $/;"	f
timer_usleep	src\devices\timer.c	/^timer_usleep (int64_t us) $/;"	f
too_many_loops	src\devices\timer.c	/^too_many_loops (unsigned loops) $/;"	f	file:
DEVICES_TIMER_H	src\devices\timer.h	2;"	d
TIMER_FREQ	src\devices\timer.h	8;"	d
COL_CNT	src\devices\vga.c	14;"	d	file:
GRAY_ON_BLACK	src\devices\vga.c	22;"	d	file:
ROW_CNT	src\devices\vga.c	15;"	d	file:
clear_row	src\devices\vga.c	/^clear_row (size_t y) $/;"	f	file:
cls	src\devices\vga.c	/^cls (void)$/;"	f	file:
cx	src\devices\vga.c	/^static size_t cx, cy;$/;"	v	file:
cy	src\devices\vga.c	/^static size_t cx, cy;$/;"	v	file:
fb	src\devices\vga.c	/^static uint8_t (*fb)[COL_CNT][2];$/;"	v	file:
find_cursor	src\devices\vga.c	/^find_cursor (size_t *x, size_t *y) $/;"	f	file:
init	src\devices\vga.c	/^init (void)$/;"	f	file:
move_cursor	src\devices\vga.c	/^move_cursor (void) $/;"	f	file:
newline	src\devices\vga.c	/^newline (void)$/;"	f	file:
vga_putc	src\devices\vga.c	/^vga_putc (int c)$/;"	f
DEVICES_VGA_H	src\devices\vga.h	2;"	d
SORT_SIZE	src\examples\bubsort.c	12;"	d	file:
main	src\examples\bubsort.c	/^main (void)$/;"	f
main	src\examples\cat.c	/^main (int argc, char *argv[]) $/;"	f
main	src\examples\cmp.c	/^main (int argc, char *argv[]) $/;"	f
main	src\examples\cp.c	/^main (int argc, char *argv[]) $/;"	f
main	src\examples\echo.c	/^main (int argc, char **argv)$/;"	f
main	src\examples\halt.c	/^main (void)$/;"	f
main	src\examples\hex-dump.c	/^main (int argc, char *argv[]) $/;"	f
adj	src\examples\insult.c	/^char *adj[] = { "3", "4", "2", ",", "1" };$/;"	v
adj1	src\examples\insult.c	/^char *adj1[] =$/;"	v
adj1Loc	src\examples\insult.c	/^char adj1Loc[] =$/;"	v
adj2	src\examples\insult.c	/^char *adj2[] =$/;"	v
adj2Loc	src\examples\insult.c	/^char adj2Loc[] =$/;"	v
adj3	src\examples\insult.c	/^char *adj3[] = { "3", "4" };$/;"	v
adj3Loc	src\examples\insult.c	/^char adj3Loc[] = { 2, 0, 1, 2 };$/;"	v
adjLoc	src\examples\insult.c	/^char adjLoc[] = { 3, 0, 1, 2, 5 };$/;"	v
adv	src\examples\insult.c	/^char *adv[] =$/;"	v
advLoc	src\examples\insult.c	/^char advLoc[] = { 8, 0, 1, 2, 3, 4, 11, 12, 18, 19 };$/;"	v
afflictors	src\examples\insult.c	/^char *afflictors[] =$/;"	v
afflictorsLoc	src\examples\insult.c	/^char afflictorsLoc[] = { 6, 0, 2, 4, 6, 8, 12, 16 };$/;"	v
animal	src\examples\insult.c	/^char *animal[] =$/;"	v
animalLoc	src\examples\insult.c	/^char animalLoc[] = { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };$/;"	v
bad_action	src\examples\insult.c	/^char *bad_action[] =$/;"	v
bad_actionLoc	src\examples\insult.c	/^char bad_actionLoc[] =$/;"	v
bad_place	src\examples\insult.c	/^char *bad_place[] =$/;"	v
bad_placeLoc	src\examples\insult.c	/^char bad_placeLoc[] = { 6, 0, 2, 3, 5, 7, 8, 9 };$/;"	v
beasties	src\examples\insult.c	/^char *beasties[] =$/;"	v
beastiesLoc	src\examples\insult.c	/^char beastiesLoc[] =$/;"	v
body_parts	src\examples\insult.c	/^char *body_parts[] =$/;"	v
body_partsLoc	src\examples\insult.c	/^char body_partsLoc[] = { 6, 0, 1, 2, 3, 4, 5, 6 };$/;"	v
condition	src\examples\insult.c	/^char *condition[] =$/;"	v
conditionLoc	src\examples\insult.c	/^char conditionLoc[] = { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };$/;"	v
curse	src\examples\insult.c	/^char *curse[] =$/;"	v
curseLoc	src\examples\insult.c	/^char curseLoc[] = { 4, 0, 3, 7, 13, 20 };$/;"	v
daGLoc	src\examples\insult.c	/^char *daGLoc[27];$/;"	v
daGrammar	src\examples\insult.c	/^char **daGrammar[27];$/;"	v
expand	src\examples\insult.c	/^expand (int num, char **grammar[], char *location[], int handle)$/;"	f
force	src\examples\insult.c	/^char *force[] = { "force", "fury", "power", "rage" };$/;"	v
forceLoc	src\examples\insult.c	/^char forceLoc[] = { 4, 0, 1, 2, 3, 4 };$/;"	v
good_verb	src\examples\insult.c	/^char *good_verb[] =$/;"	v
good_verbLoc	src\examples\insult.c	/^char good_verbLoc[] = { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11 };$/;"	v
in_something	src\examples\insult.c	/^char *in_something[] =$/;"	v
in_somethingLoc	src\examples\insult.c	/^char in_somethingLoc[] = { 8, 0, 1, 3, 4, 5, 6, 8, 9, 10 };$/;"	v
init_grammar	src\examples\insult.c	/^init_grammar (void)$/;"	f	file:
main	src\examples\insult.c	/^main (int argc, char *argv[])$/;"	f
metaphor	src\examples\insult.c	/^char *metaphor[] =$/;"	v
metaphorLoc	src\examples\insult.c	/^char metaphorLoc[] = { 6, 0, 3, 5, 7, 9, 20, 23 };$/;"	v
name	src\examples\insult.c	/^char *name[] =$/;"	v
nameLoc	src\examples\insult.c	/^char nameLoc[] = { 7, 0, 1, 6, 10, 16, 21, 23, 27 };$/;"	v
noun	src\examples\insult.c	/^char *noun[] =$/;"	v
nounLoc	src\examples\insult.c	/^char nounLoc[] = { 13, 0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15 };$/;"	v
noun_and_prep	src\examples\insult.c	/^char *noun_and_prep[] =$/;"	v
noun_and_prepLoc	src\examples\insult.c	/^char noun_and_prepLoc[] =$/;"	v
numbers	src\examples\insult.c	/^char *numbers[] =$/;"	v
numbersLoc	src\examples\insult.c	/^char numbersLoc[] = { 7, 0, 2, 4, 5, 7, 8, 10, 13 };$/;"	v
organics	src\examples\insult.c	/^char *organics[] =$/;"	v
organicsLoc	src\examples\insult.c	/^char organicsLoc[] =$/;"	v
place	src\examples\insult.c	/^char *place[] =$/;"	v
placeLoc	src\examples\insult.c	/^char placeLoc[] = { 5, 0, 3, 7, 11, 17, 20 };$/;"	v
quantity	src\examples\insult.c	/^char *quantity[] =$/;"	v
quantityLoc	src\examples\insult.c	/^char quantityLoc[] = { 10, 0, 4, 8, 11, 14, 15, 18, 22, 26, 32, 33 };$/;"	v
relation	src\examples\insult.c	/^char *relation[] =$/;"	v
relationLoc	src\examples\insult.c	/^char relationLoc[] = { 6, 0, 1, 2, 3, 5, 7, 9 };$/;"	v
start	src\examples\insult.c	/^char *start[] =$/;"	v
startLoc	src\examples\insult.c	/^char startLoc[] = { 3, 0, 4, 7, 16 };$/;"	v
stuff	src\examples\insult.c	/^char *stuff[] =$/;"	v
stuffLoc	src\examples\insult.c	/^char stuffLoc[] = { 14, 0, 1, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 17, 18 };$/;"	v
usage	src\examples\insult.c	/^usage (int ret_code, const char *message, ...)$/;"	f	file:
main	src\examples\lineup.c	/^main (int argc, char *argv[])$/;"	f
list_dir	src\examples\ls.c	/^list_dir (const char *dir, bool verbose) $/;"	f	file:
main	src\examples\ls.c	/^main (int argc, char *argv[]) $/;"	f
A	src\examples\matmult.c	/^int A[DIM][DIM];$/;"	v
B	src\examples\matmult.c	/^int B[DIM][DIM];$/;"	v
C	src\examples\matmult.c	/^int C[DIM][DIM];$/;"	v
DIM	src\examples\matmult.c	29;"	d	file:
main	src\examples\matmult.c	/^main (void)$/;"	f
main	src\examples\mcat.c	/^main (int argc, char *argv[]) $/;"	f
main	src\examples\mcp.c	/^main (int argc, char *argv[]) $/;"	f
main	src\examples\mkdir.c	/^main (int argc, char *argv[]) $/;"	f
MAX_LEVEL	src\examples\pwd.c	76;"	d	file:
get_inumber	src\examples\pwd.c	/^get_inumber (const char *file_name, int *inum) $/;"	f	file:
getcwd	src\examples\pwd.c	/^getcwd (char *cwd, size_t cwd_size) $/;"	f	file:
main	src\examples\pwd.c	/^main (void) $/;"	f
prepend	src\examples\pwd.c	/^prepend (const char *prefix,$/;"	f	file:
main	src\examples\recursor.c	/^main (int argc, char *argv[])$/;"	f
main	src\examples\rm.c	/^main (int argc, char *argv[]) $/;"	f
backspace	src\examples\shell.c	/^backspace (char **pos, char line[]) $/;"	f	file:
main	src\examples\shell.c	/^main (void)$/;"	f
read_line	src\examples\shell.c	/^read_line (char line[], size_t size) $/;"	f	file:
dir	src\filesys\directory.c	/^struct dir $/;"	s	file:
dir_add	src\filesys\directory.c	/^dir_add (struct dir *dir, const char *name, block_sector_t inode_sector)$/;"	f
dir_close	src\filesys\directory.c	/^dir_close (struct dir *dir) $/;"	f
dir_create	src\filesys\directory.c	/^dir_create (block_sector_t sector, size_t entry_cnt)$/;"	f
dir_entry	src\filesys\directory.c	/^struct dir_entry $/;"	s	file:
dir_get_inode	src\filesys\directory.c	/^dir_get_inode (struct dir *dir) $/;"	f
dir_lookup	src\filesys\directory.c	/^dir_lookup (const struct dir *dir, const char *name,$/;"	f
dir_open	src\filesys\directory.c	/^dir_open (struct inode *inode) $/;"	f
dir_open_root	src\filesys\directory.c	/^dir_open_root (void)$/;"	f
dir_readdir	src\filesys\directory.c	/^dir_readdir (struct dir *dir, char name[NAME_MAX + 1])$/;"	f
dir_remove	src\filesys\directory.c	/^dir_remove (struct dir *dir, const char *name) $/;"	f
dir_reopen	src\filesys\directory.c	/^dir_reopen (struct dir *dir) $/;"	f
in_use	src\filesys\directory.c	/^    bool in_use;                        \/* In use or free? *\/$/;"	m	struct:dir_entry	file:
inode	src\filesys\directory.c	/^    struct inode *inode;                \/* Backing store. *\/$/;"	m	struct:dir	typeref:struct:dir::inode	file:
inode_sector	src\filesys\directory.c	/^    block_sector_t inode_sector;        \/* Sector number of header. *\/$/;"	m	struct:dir_entry	file:
lookup	src\filesys\directory.c	/^lookup (const struct dir *dir, const char *name,$/;"	f	file:
name	src\filesys\directory.c	/^    char name[NAME_MAX + 1];            \/* Null terminated file name. *\/$/;"	m	struct:dir_entry	file:
pos	src\filesys\directory.c	/^    off_t pos;                          \/* Current position. *\/$/;"	m	struct:dir	file:
FILESYS_DIRECTORY_H	src\filesys\directory.h	2;"	d
NAME_MAX	src\filesys\directory.h	12;"	d
FILESYS_FDMAP_H	src\filesys\fdmap.h	2;"	d
fd	src\filesys\fdmap.h	/^  int fd;$/;"	m	struct:fdmap
fdmap	src\filesys\fdmap.h	/^struct fdmap$/;"	s
fdmap_elem	src\filesys\fdmap.h	/^  struct list_elem fdmap_elem;$/;"	m	struct:fdmap	typeref:struct:fdmap::list_elem
fp	src\filesys\fdmap.h	/^  struct file * fp;$/;"	m	struct:fdmap	typeref:struct:fdmap::file
deny_write	src\filesys\file.c	/^    bool deny_write;            \/* Has file_deny_write() been called? *\/$/;"	m	struct:file	file:
file	src\filesys\file.c	/^struct file $/;"	s	file:
file_allow_write	src\filesys\file.c	/^file_allow_write (struct file *file) $/;"	f
file_close	src\filesys\file.c	/^file_close (struct file *file) $/;"	f
file_deny_write	src\filesys\file.c	/^file_deny_write (struct file *file) $/;"	f
file_get_deny	src\filesys\file.c	/^file_get_deny (struct file *file)$/;"	f
file_get_inode	src\filesys\file.c	/^file_get_inode (struct file *file) $/;"	f
file_length	src\filesys\file.c	/^file_length (struct file *file) $/;"	f
file_open	src\filesys\file.c	/^file_open (struct inode *inode) $/;"	f
file_read	src\filesys\file.c	/^file_read (struct file *file, void *buffer, off_t size) $/;"	f
file_read_at	src\filesys\file.c	/^file_read_at (struct file *file, void *buffer, off_t size, off_t file_ofs) $/;"	f
file_reopen	src\filesys\file.c	/^file_reopen (struct file *file) $/;"	f
file_seek	src\filesys\file.c	/^file_seek (struct file *file, off_t new_pos)$/;"	f
file_tell	src\filesys\file.c	/^file_tell (struct file *file) $/;"	f
file_write	src\filesys\file.c	/^file_write (struct file *file, const void *buffer, off_t size) $/;"	f
file_write_at	src\filesys\file.c	/^file_write_at (struct file *file, const void *buffer, off_t size,$/;"	f
inode	src\filesys\file.c	/^    struct inode *inode;        \/* File's inode. *\/$/;"	m	struct:file	typeref:struct:file::inode	file:
pos	src\filesys\file.c	/^    off_t pos;                  \/* Current position. *\/$/;"	m	struct:file	file:
FILESYS_FILE_H	src\filesys\file.h	2;"	d
do_format	src\filesys\filesys.c	/^do_format (void)$/;"	f	file:
filesys_create	src\filesys\filesys.c	/^filesys_create (const char *name, off_t initial_size) $/;"	f
filesys_done	src\filesys\filesys.c	/^filesys_done (void) $/;"	f
filesys_init	src\filesys\filesys.c	/^filesys_init (bool format) $/;"	f
filesys_open	src\filesys\filesys.c	/^filesys_open (const char *name)$/;"	f
filesys_remove	src\filesys\filesys.c	/^filesys_remove (const char *name) $/;"	f
fs_device	src\filesys\filesys.c	/^struct block *fs_device;$/;"	v	typeref:struct:block
FILESYS_FILESYS_H	src\filesys\filesys.h	2;"	d
FREE_MAP_SECTOR	src\filesys\filesys.h	8;"	d
ROOT_DIR_SECTOR	src\filesys\filesys.h	9;"	d
fs_device	src\filesys\filesys.h	/^struct block *fs_device;$/;"	v	typeref:struct:block
free_map	src\filesys\free-map.c	/^static struct bitmap *free_map;      \/* Free map, one bit per sector. *\/$/;"	v	typeref:struct:bitmap	file:
free_map_allocate	src\filesys\free-map.c	/^free_map_allocate (size_t cnt, block_sector_t *sectorp)$/;"	f
free_map_close	src\filesys\free-map.c	/^free_map_close (void) $/;"	f
free_map_create	src\filesys\free-map.c	/^free_map_create (void) $/;"	f
free_map_file	src\filesys\free-map.c	/^static struct file *free_map_file;   \/* Free map file. *\/$/;"	v	typeref:struct:file	file:
free_map_init	src\filesys\free-map.c	/^free_map_init (void) $/;"	f
free_map_open	src\filesys\free-map.c	/^free_map_open (void) $/;"	f
free_map_release	src\filesys\free-map.c	/^free_map_release (block_sector_t sector, size_t cnt)$/;"	f
FILESYS_FREE_MAP_H	src\filesys\free-map.h	2;"	d
fsutil_append	src\filesys\fsutil.c	/^fsutil_append (char **argv)$/;"	f
fsutil_cat	src\filesys\fsutil.c	/^fsutil_cat (char **argv)$/;"	f
fsutil_extract	src\filesys\fsutil.c	/^fsutil_extract (char **argv UNUSED) $/;"	f
fsutil_ls	src\filesys\fsutil.c	/^fsutil_ls (char **argv UNUSED) $/;"	f
fsutil_rm	src\filesys\fsutil.c	/^fsutil_rm (char **argv) $/;"	f
FILESYS_FSUTIL_H	src\filesys\fsutil.h	2;"	d
INODE_MAGIC	src\filesys\inode.c	11;"	d	file:
byte_to_sector	src\filesys\inode.c	/^byte_to_sector (const struct inode *inode, off_t pos) $/;"	f	file:
bytes_to_sectors	src\filesys\inode.c	/^bytes_to_sectors (off_t size)$/;"	f	file:
data	src\filesys\inode.c	/^    struct inode_disk data;             \/* Inode content. *\/$/;"	m	struct:inode	typeref:struct:inode::inode_disk	file:
deny_write_cnt	src\filesys\inode.c	/^    int deny_write_cnt;                 \/* 0: writes ok, >0: deny writes. *\/$/;"	m	struct:inode	file:
elem	src\filesys\inode.c	/^    struct list_elem elem;              \/* Element in inode list. *\/$/;"	m	struct:inode	typeref:struct:inode::list_elem	file:
inode	src\filesys\inode.c	/^struct inode $/;"	s	file:
inode_allow_write	src\filesys\inode.c	/^inode_allow_write (struct inode *inode) $/;"	f
inode_close	src\filesys\inode.c	/^inode_close (struct inode *inode) $/;"	f
inode_create	src\filesys\inode.c	/^inode_create (block_sector_t sector, off_t length)$/;"	f
inode_deny_number	src\filesys\inode.c	/^int inode_deny_number(struct inode *inode)$/;"	f
inode_deny_write	src\filesys\inode.c	/^inode_deny_write (struct inode *inode) $/;"	f
inode_disk	src\filesys\inode.c	/^struct inode_disk$/;"	s	file:
inode_get_inumber	src\filesys\inode.c	/^inode_get_inumber (const struct inode *inode)$/;"	f
inode_init	src\filesys\inode.c	/^inode_init (void) $/;"	f
inode_length	src\filesys\inode.c	/^inode_length (const struct inode *inode)$/;"	f
inode_open	src\filesys\inode.c	/^inode_open (block_sector_t sector)$/;"	f
inode_read_at	src\filesys\inode.c	/^inode_read_at (struct inode *inode, void *buffer_, off_t size, off_t offset) $/;"	f
inode_remove	src\filesys\inode.c	/^inode_remove (struct inode *inode) $/;"	f
inode_reopen	src\filesys\inode.c	/^inode_reopen (struct inode *inode)$/;"	f
inode_write_at	src\filesys\inode.c	/^inode_write_at (struct inode *inode, const void *buffer_, off_t size,$/;"	f
length	src\filesys\inode.c	/^    off_t length;                       \/* File size in bytes. *\/$/;"	m	struct:inode_disk	file:
magic	src\filesys\inode.c	/^    unsigned magic;                     \/* Magic number. *\/$/;"	m	struct:inode_disk	file:
open_cnt	src\filesys\inode.c	/^    int open_cnt;                       \/* Number of openers. *\/$/;"	m	struct:inode	file:
open_inodes	src\filesys\inode.c	/^static struct list open_inodes;$/;"	v	typeref:struct:list	file:
removed	src\filesys\inode.c	/^    bool removed;                       \/* True if deleted, false otherwise. *\/$/;"	m	struct:inode	file:
sector	src\filesys\inode.c	/^    block_sector_t sector;              \/* Sector number of disk location. *\/$/;"	m	struct:inode	file:
start	src\filesys\inode.c	/^    block_sector_t start;               \/* First data sector. *\/$/;"	m	struct:inode_disk	file:
unused	src\filesys\inode.c	/^    uint32_t unused[125];               \/* Not used. *\/$/;"	m	struct:inode_disk	file:
FILESYS_INODE_H	src\filesys\inode.h	2;"	d
FILESYS_OFF_T_H	src\filesys\off_t.h	2;"	d
PROTd	src\filesys\off_t.h	13;"	d
off_t	src\filesys\off_t.h	/^typedef int32_t off_t;$/;"	t
__divdi3	src\lib\arithmetic.c	/^__divdi3 (long long n, long long d) $/;"	f
__moddi3	src\lib\arithmetic.c	/^__moddi3 (long long n, long long d) $/;"	f
__udivdi3	src\lib\arithmetic.c	/^__udivdi3 (unsigned long long n, unsigned long long d) $/;"	f
__umoddi3	src\lib\arithmetic.c	/^__umoddi3 (unsigned long long n, unsigned long long d) $/;"	f
divl	src\lib\arithmetic.c	/^divl (uint64_t n, uint32_t d)$/;"	f	file:
nlz	src\lib\arithmetic.c	/^nlz (uint32_t x) $/;"	f	file:
sdiv64	src\lib\arithmetic.c	/^sdiv64 (int64_t n, int64_t d)$/;"	f	file:
smod64	src\lib\arithmetic.c	/^smod64 (int64_t n, int64_t d)$/;"	f	file:
udiv64	src\lib\arithmetic.c	/^udiv64 (uint64_t n, uint64_t d)$/;"	f	file:
umod64	src\lib\arithmetic.c	/^umod64 (uint64_t n, uint64_t d)$/;"	f	file:
__LIB_CTYPE_H	src\lib\ctype.h	2;"	d
isalnum	src\lib\ctype.h	/^static inline int isalnum (int c) { return isalpha (c) || isdigit (c); }$/;"	f
isalpha	src\lib\ctype.h	/^static inline int isalpha (int c) { return islower (c) || isupper (c); }$/;"	f
isascii	src\lib\ctype.h	/^static inline int isascii (int c) { return c >= 0 && c < 128; }$/;"	f
isblank	src\lib\ctype.h	/^static inline int isblank (int c) { return c == ' ' || c == '\\t'; }$/;"	f
iscntrl	src\lib\ctype.h	/^static inline int iscntrl (int c) { return (c >= 0 && c < 32) || c == 127; }$/;"	f
isdigit	src\lib\ctype.h	/^static inline int isdigit (int c) { return c >= '0' && c <= '9'; }$/;"	f
isgraph	src\lib\ctype.h	/^static inline int isgraph (int c) { return c > 32 && c < 127; }$/;"	f
islower	src\lib\ctype.h	/^static inline int islower (int c) { return c >= 'a' && c <= 'z'; }$/;"	f
isprint	src\lib\ctype.h	/^static inline int isprint (int c) { return c >= 32 && c < 127; }$/;"	f
ispunct	src\lib\ctype.h	/^static inline int ispunct (int c) {$/;"	f
isspace	src\lib\ctype.h	/^static inline int isspace (int c) {$/;"	f
isupper	src\lib\ctype.h	/^static inline int isupper (int c) { return c >= 'A' && c <= 'Z'; }$/;"	f
isxdigit	src\lib\ctype.h	/^static inline int isxdigit (int c) {$/;"	f
tolower	src\lib\ctype.h	/^static inline int tolower (int c) { return isupper (c) ? c - 'A' + 'a' : c; }$/;"	f
toupper	src\lib\ctype.h	/^static inline int toupper (int c) { return islower (c) ? c - 'a' + 'A' : c; }$/;"	f
debug_backtrace	src\lib\debug.c	/^debug_backtrace (void) $/;"	f
ASSERT	src\lib\debug.h	27;"	d
ASSERT	src\lib\debug.h	31;"	d
ASSERT	src\lib\debug.h	37;"	d
NOT_REACHED	src\lib\debug.h	28;"	d
NOT_REACHED	src\lib\debug.h	35;"	d
NOT_REACHED	src\lib\debug.h	38;"	d
NO_INLINE	src\lib\debug.h	9;"	d
NO_RETURN	src\lib\debug.h	8;"	d
PANIC	src\lib\debug.h	14;"	d
PRINTF_FORMAT	src\lib\debug.h	10;"	d
UNUSED	src\lib\debug.h	7;"	d
__LIB_DEBUG_H	src\lib\debug.h	2;"	d
PRIX16	src\lib\inttypes.h	18;"	d
PRIX32	src\lib\inttypes.h	25;"	d
PRIX64	src\lib\inttypes.h	32;"	d
PRIX8	src\lib\inttypes.h	11;"	d
PRIXMAX	src\lib\inttypes.h	39;"	d
PRIXPTR	src\lib\inttypes.h	46;"	d
PRId16	src\lib\inttypes.h	13;"	d
PRId32	src\lib\inttypes.h	20;"	d
PRId64	src\lib\inttypes.h	27;"	d
PRId8	src\lib\inttypes.h	6;"	d
PRIdMAX	src\lib\inttypes.h	34;"	d
PRIdPTR	src\lib\inttypes.h	41;"	d
PRIi16	src\lib\inttypes.h	14;"	d
PRIi32	src\lib\inttypes.h	21;"	d
PRIi64	src\lib\inttypes.h	28;"	d
PRIi8	src\lib\inttypes.h	7;"	d
PRIiMAX	src\lib\inttypes.h	35;"	d
PRIiPTR	src\lib\inttypes.h	42;"	d
PRIo16	src\lib\inttypes.h	15;"	d
PRIo32	src\lib\inttypes.h	22;"	d
PRIo64	src\lib\inttypes.h	29;"	d
PRIo8	src\lib\inttypes.h	8;"	d
PRIoMAX	src\lib\inttypes.h	36;"	d
PRIoPTR	src\lib\inttypes.h	43;"	d
PRIu16	src\lib\inttypes.h	16;"	d
PRIu32	src\lib\inttypes.h	23;"	d
PRIu64	src\lib\inttypes.h	30;"	d
PRIu8	src\lib\inttypes.h	9;"	d
PRIuMAX	src\lib\inttypes.h	37;"	d
PRIuPTR	src\lib\inttypes.h	44;"	d
PRIx16	src\lib\inttypes.h	17;"	d
PRIx32	src\lib\inttypes.h	24;"	d
PRIx64	src\lib\inttypes.h	31;"	d
PRIx8	src\lib\inttypes.h	10;"	d
PRIxMAX	src\lib\inttypes.h	38;"	d
PRIxPTR	src\lib\inttypes.h	45;"	d
__LIB_INTTYPES_H	src\lib\inttypes.h	2;"	d
ELEM_BITS	src\lib\kernel\bitmap.c	22;"	d	file:
bit_cnt	src\lib\kernel\bitmap.c	/^    size_t bit_cnt;     \/* Number of bits. *\/$/;"	m	struct:bitmap	file:
bit_mask	src\lib\kernel\bitmap.c	/^bit_mask (size_t bit_idx) $/;"	f	file:
bitmap	src\lib\kernel\bitmap.c	/^struct bitmap$/;"	s	file:
bitmap_all	src\lib\kernel\bitmap.c	/^bitmap_all (const struct bitmap *b, size_t start, size_t cnt) $/;"	f
bitmap_any	src\lib\kernel\bitmap.c	/^bitmap_any (const struct bitmap *b, size_t start, size_t cnt) $/;"	f
bitmap_buf_size	src\lib\kernel\bitmap.c	/^bitmap_buf_size (size_t bit_cnt) $/;"	f
bitmap_contains	src\lib\kernel\bitmap.c	/^bitmap_contains (const struct bitmap *b, size_t start, size_t cnt, bool value) $/;"	f
bitmap_count	src\lib\kernel\bitmap.c	/^bitmap_count (const struct bitmap *b, size_t start, size_t cnt, bool value) $/;"	f
bitmap_create	src\lib\kernel\bitmap.c	/^bitmap_create (size_t bit_cnt) $/;"	f
bitmap_create_in_buf	src\lib\kernel\bitmap.c	/^bitmap_create_in_buf (size_t bit_cnt, void *block, size_t block_size UNUSED)$/;"	f
bitmap_destroy	src\lib\kernel\bitmap.c	/^bitmap_destroy (struct bitmap *b) $/;"	f
bitmap_dump	src\lib\kernel\bitmap.c	/^bitmap_dump (const struct bitmap *b) $/;"	f
bitmap_file_size	src\lib\kernel\bitmap.c	/^bitmap_file_size (const struct bitmap *b) $/;"	f
bitmap_flip	src\lib\kernel\bitmap.c	/^bitmap_flip (struct bitmap *b, size_t bit_idx) $/;"	f
bitmap_mark	src\lib\kernel\bitmap.c	/^bitmap_mark (struct bitmap *b, size_t bit_idx) $/;"	f
bitmap_none	src\lib\kernel\bitmap.c	/^bitmap_none (const struct bitmap *b, size_t start, size_t cnt) $/;"	f
bitmap_read	src\lib\kernel\bitmap.c	/^bitmap_read (struct bitmap *b, struct file *file) $/;"	f
bitmap_reset	src\lib\kernel\bitmap.c	/^bitmap_reset (struct bitmap *b, size_t bit_idx) $/;"	f
bitmap_scan	src\lib\kernel\bitmap.c	/^bitmap_scan (const struct bitmap *b, size_t start, size_t cnt, bool value) $/;"	f
bitmap_scan_and_flip	src\lib\kernel\bitmap.c	/^bitmap_scan_and_flip (struct bitmap *b, size_t start, size_t cnt, bool value)$/;"	f
bitmap_set	src\lib\kernel\bitmap.c	/^bitmap_set (struct bitmap *b, size_t idx, bool value) $/;"	f
bitmap_set_all	src\lib\kernel\bitmap.c	/^bitmap_set_all (struct bitmap *b, bool value) $/;"	f
bitmap_set_multiple	src\lib\kernel\bitmap.c	/^bitmap_set_multiple (struct bitmap *b, size_t start, size_t cnt, bool value) $/;"	f
bitmap_size	src\lib\kernel\bitmap.c	/^bitmap_size (const struct bitmap *b)$/;"	f
bitmap_test	src\lib\kernel\bitmap.c	/^bitmap_test (const struct bitmap *b, size_t idx) $/;"	f
bitmap_write	src\lib\kernel\bitmap.c	/^bitmap_write (const struct bitmap *b, struct file *file)$/;"	f
bits	src\lib\kernel\bitmap.c	/^    elem_type *bits;    \/* Elements that represent bits. *\/$/;"	m	struct:bitmap	file:
byte_cnt	src\lib\kernel\bitmap.c	/^byte_cnt (size_t bit_cnt)$/;"	f	file:
elem_cnt	src\lib\kernel\bitmap.c	/^elem_cnt (size_t bit_cnt)$/;"	f	file:
elem_idx	src\lib\kernel\bitmap.c	/^elem_idx (size_t bit_idx) $/;"	f	file:
elem_type	src\lib\kernel\bitmap.c	/^typedef unsigned long elem_type;$/;"	t	file:
last_mask	src\lib\kernel\bitmap.c	/^last_mask (const struct bitmap *b) $/;"	f	file:
BITMAP_ERROR	src\lib\kernel\bitmap.h	36;"	d
__LIB_KERNEL_BITMAP_H	src\lib\kernel\bitmap.h	2;"	d
acquire_console	src\lib\kernel\console.c	/^acquire_console (void) $/;"	f	file:
console_init	src\lib\kernel\console.c	/^console_init (void) $/;"	f
console_lock	src\lib\kernel\console.c	/^static struct lock console_lock;$/;"	v	typeref:struct:lock	file:
console_lock_depth	src\lib\kernel\console.c	/^static int console_lock_depth;$/;"	v	file:
console_locked_by_current_thread	src\lib\kernel\console.c	/^console_locked_by_current_thread (void) $/;"	f	file:
console_panic	src\lib\kernel\console.c	/^console_panic (void) $/;"	f
console_print_stats	src\lib\kernel\console.c	/^console_print_stats (void) $/;"	f
putbuf	src\lib\kernel\console.c	/^putbuf (const char *buffer, size_t n) $/;"	f
putchar	src\lib\kernel\console.c	/^putchar (int c) $/;"	f
putchar_have_lock	src\lib\kernel\console.c	/^putchar_have_lock (uint8_t c) $/;"	f	file:
puts	src\lib\kernel\console.c	/^puts (const char *s) $/;"	f
release_console	src\lib\kernel\console.c	/^release_console (void) $/;"	f	file:
use_console_lock	src\lib\kernel\console.c	/^static bool use_console_lock;$/;"	v	file:
vprintf	src\lib\kernel\console.c	/^vprintf (const char *format, va_list args) $/;"	f
vprintf_helper	src\lib\kernel\console.c	/^vprintf_helper (char c, void *char_cnt_) $/;"	f	file:
write_cnt	src\lib\kernel\console.c	/^static int64_t write_cnt;$/;"	v	file:
__LIB_KERNEL_CONSOLE_H	src\lib\kernel\console.h	2;"	d
debug_backtrace_all	src\lib\kernel\debug.c	/^debug_backtrace_all (void)$/;"	f
debug_panic	src\lib\kernel\debug.c	/^debug_panic (const char *file, int line, const char *function,$/;"	f
print_stacktrace	src\lib\kernel\debug.c	/^print_stacktrace(struct thread *t, void *aux UNUSED)$/;"	f	file:
BEST_ELEMS_PER_BUCKET	src\lib\kernel\hash.c	344;"	d	file:
FNV_32_BASIS	src\lib\kernel\hash.c	262;"	d	file:
FNV_32_PRIME	src\lib\kernel\hash.c	261;"	d	file:
MAX_ELEMS_PER_BUCKET	src\lib\kernel\hash.c	345;"	d	file:
MIN_ELEMS_PER_BUCKET	src\lib\kernel\hash.c	343;"	d	file:
find_bucket	src\lib\kernel\hash.c	/^find_bucket (struct hash *h, struct hash_elem *e) $/;"	f	file:
find_elem	src\lib\kernel\hash.c	/^find_elem (struct hash *h, struct list *bucket, struct hash_elem *e) $/;"	f	file:
hash_apply	src\lib\kernel\hash.c	/^hash_apply (struct hash *h, hash_action_func *action) $/;"	f
hash_bytes	src\lib\kernel\hash.c	/^hash_bytes (const void *buf_, size_t size)$/;"	f
hash_clear	src\lib\kernel\hash.c	/^hash_clear (struct hash *h, hash_action_func *destructor) $/;"	f
hash_cur	src\lib\kernel\hash.c	/^hash_cur (struct hash_iterator *i) $/;"	f
hash_delete	src\lib\kernel\hash.c	/^hash_delete (struct hash *h, struct hash_elem *e)$/;"	f
hash_destroy	src\lib\kernel\hash.c	/^hash_destroy (struct hash *h, hash_action_func *destructor) $/;"	f
hash_empty	src\lib\kernel\hash.c	/^hash_empty (struct hash *h) $/;"	f
hash_find	src\lib\kernel\hash.c	/^hash_find (struct hash *h, struct hash_elem *e) $/;"	f
hash_first	src\lib\kernel\hash.c	/^hash_first (struct hash_iterator *i, struct hash *h) $/;"	f
hash_init	src\lib\kernel\hash.c	/^hash_init (struct hash *h,$/;"	f
hash_insert	src\lib\kernel\hash.c	/^hash_insert (struct hash *h, struct hash_elem *new)$/;"	f
hash_int	src\lib\kernel\hash.c	/^hash_int (int i) $/;"	f
hash_next	src\lib\kernel\hash.c	/^hash_next (struct hash_iterator *i)$/;"	f
hash_replace	src\lib\kernel\hash.c	/^hash_replace (struct hash *h, struct hash_elem *new) $/;"	f
hash_size	src\lib\kernel\hash.c	/^hash_size (struct hash *h) $/;"	f
hash_string	src\lib\kernel\hash.c	/^hash_string (const char *s_) $/;"	f
insert_elem	src\lib\kernel\hash.c	/^insert_elem (struct hash *h, struct list *bucket, struct hash_elem *e) $/;"	f	file:
is_power_of_2	src\lib\kernel\hash.c	/^is_power_of_2 (size_t x) $/;"	f	file:
list_elem_to_hash_elem	src\lib\kernel\hash.c	12;"	d	file:
rehash	src\lib\kernel\hash.c	/^rehash (struct hash *h) $/;"	f	file:
remove_elem	src\lib\kernel\hash.c	/^remove_elem (struct hash *h, struct hash_elem *e) $/;"	f	file:
turn_off_least_1bit	src\lib\kernel\hash.c	/^turn_off_least_1bit (size_t x) $/;"	f	file:
__LIB_KERNEL_HASH_H	src\lib\kernel\hash.h	2;"	d
aux	src\lib\kernel\hash.h	/^    void *aux;                  \/* Auxiliary data for `hash' and `less'. *\/$/;"	m	struct:hash
bucket	src\lib\kernel\hash.h	/^    struct list *bucket;        \/* Current bucket. *\/$/;"	m	struct:hash_iterator	typeref:struct:hash_iterator::list
bucket_cnt	src\lib\kernel\hash.h	/^    size_t bucket_cnt;          \/* Number of buckets, a power of 2. *\/$/;"	m	struct:hash
buckets	src\lib\kernel\hash.h	/^    struct list *buckets;       \/* Array of `bucket_cnt' lists. *\/$/;"	m	struct:hash	typeref:struct:hash::list
elem	src\lib\kernel\hash.h	/^    struct hash_elem *elem;     \/* Current hash element in current bucket. *\/$/;"	m	struct:hash_iterator	typeref:struct:hash_iterator::hash_elem
elem_cnt	src\lib\kernel\hash.h	/^    size_t elem_cnt;            \/* Number of elements in table. *\/$/;"	m	struct:hash
hash	src\lib\kernel\hash.h	/^    hash_hash_func *hash;       \/* Hash function. *\/$/;"	m	struct:hash
hash	src\lib\kernel\hash.h	/^    struct hash *hash;          \/* The hash table. *\/$/;"	m	struct:hash_iterator	typeref:struct:hash_iterator::hash
hash	src\lib\kernel\hash.h	/^struct hash $/;"	s
hash_action_func	src\lib\kernel\hash.h	/^typedef void hash_action_func (struct hash_elem *e, void *aux);$/;"	t
hash_elem	src\lib\kernel\hash.h	/^struct hash_elem $/;"	s
hash_entry	src\lib\kernel\hash.h	39;"	d
hash_hash_func	src\lib\kernel\hash.h	/^typedef unsigned hash_hash_func (const struct hash_elem *e, void *aux);$/;"	t
hash_iterator	src\lib\kernel\hash.h	/^struct hash_iterator $/;"	s
hash_less_func	src\lib\kernel\hash.h	/^typedef bool hash_less_func (const struct hash_elem *a,$/;"	t
less	src\lib\kernel\hash.h	/^    hash_less_func *less;       \/* Comparison function. *\/$/;"	m	struct:hash
list_elem	src\lib\kernel\hash.h	/^    struct list_elem list_elem;$/;"	m	struct:hash_elem	typeref:struct:hash_elem::list_elem
find_end_of_run	src\lib\kernel\list.c	/^find_end_of_run (struct list_elem *a, struct list_elem *b,$/;"	f	file:
inplace_merge	src\lib\kernel\list.c	/^inplace_merge (struct list_elem *a0, struct list_elem *a1b0,$/;"	f	file:
is_head	src\lib\kernel\list.c	/^is_head (struct list_elem *elem)$/;"	f	file:
is_interior	src\lib\kernel\list.c	/^is_interior (struct list_elem *elem)$/;"	f	file:
is_sorted	src\lib\kernel\list.c	/^is_sorted (struct list_elem *a, struct list_elem *b,$/;"	f	file:
is_tail	src\lib\kernel\list.c	/^is_tail (struct list_elem *elem)$/;"	f	file:
list_back	src\lib\kernel\list.c	/^list_back (struct list *list)$/;"	f
list_begin	src\lib\kernel\list.c	/^list_begin (struct list *list)$/;"	f
list_empty	src\lib\kernel\list.c	/^list_empty (struct list *list)$/;"	f
list_end	src\lib\kernel\list.c	/^list_end (struct list *list)$/;"	f
list_front	src\lib\kernel\list.c	/^list_front (struct list *list)$/;"	f
list_head	src\lib\kernel\list.c	/^list_head (struct list *list) $/;"	f
list_init	src\lib\kernel\list.c	/^list_init (struct list *list)$/;"	f
list_insert	src\lib\kernel\list.c	/^list_insert (struct list_elem *before, struct list_elem *elem)$/;"	f
list_insert_ordered	src\lib\kernel\list.c	/^list_insert_ordered (struct list *list, struct list_elem *elem,$/;"	f
list_max	src\lib\kernel\list.c	/^list_max (struct list *list, list_less_func *less, void *aux)$/;"	f
list_min	src\lib\kernel\list.c	/^list_min (struct list *list, list_less_func *less, void *aux)$/;"	f
list_next	src\lib\kernel\list.c	/^list_next (struct list_elem *elem)$/;"	f
list_pop_back	src\lib\kernel\list.c	/^list_pop_back (struct list *list)$/;"	f
list_pop_front	src\lib\kernel\list.c	/^list_pop_front (struct list *list)$/;"	f
list_prev	src\lib\kernel\list.c	/^list_prev (struct list_elem *elem)$/;"	f
list_push_back	src\lib\kernel\list.c	/^list_push_back (struct list *list, struct list_elem *elem)$/;"	f
list_push_front	src\lib\kernel\list.c	/^list_push_front (struct list *list, struct list_elem *elem)$/;"	f
list_rbegin	src\lib\kernel\list.c	/^list_rbegin (struct list *list) $/;"	f
list_remove	src\lib\kernel\list.c	/^list_remove (struct list_elem *elem)$/;"	f
list_rend	src\lib\kernel\list.c	/^list_rend (struct list *list) $/;"	f
list_reverse	src\lib\kernel\list.c	/^list_reverse (struct list *list)$/;"	f
list_size	src\lib\kernel\list.c	/^list_size (struct list *list)$/;"	f
list_sort	src\lib\kernel\list.c	/^list_sort (struct list *list, list_less_func *less, void *aux)$/;"	f
list_splice	src\lib\kernel\list.c	/^list_splice (struct list_elem *before,$/;"	f
list_tail	src\lib\kernel\list.c	/^list_tail (struct list *list) $/;"	f
list_unique	src\lib\kernel\list.c	/^list_unique (struct list *list, struct list *duplicates,$/;"	f
swap	src\lib\kernel\list.c	/^swap (struct list_elem **a, struct list_elem **b) $/;"	f	file:
LIST_INITIALIZER	src\lib\kernel\list.h	122;"	d
__LIB_KERNEL_LIST_H	src\lib\kernel\list.h	2;"	d
head	src\lib\kernel\list.h	/^    struct list_elem head;      \/* List head. *\/$/;"	m	struct:list	typeref:struct:list::list_elem
list	src\lib\kernel\list.h	/^struct list $/;"	s
list_elem	src\lib\kernel\list.h	/^struct list_elem $/;"	s
list_entry	src\lib\kernel\list.h	108;"	d
list_less_func	src\lib\kernel\list.h	/^typedef bool list_less_func (const struct list_elem *a,$/;"	t
next	src\lib\kernel\list.h	/^    struct list_elem *next;     \/* Next list element. *\/$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
prev	src\lib\kernel\list.h	/^    struct list_elem *prev;     \/* Previous list element. *\/$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
tail	src\lib\kernel\list.h	/^    struct list_elem tail;      \/* List tail. *\/$/;"	m	struct:list	typeref:struct:list::list_elem
__LIB_KERNEL_STDIO_H	src\lib\kernel\stdio.h	2;"	d
CHAR_BIT	src\lib\limits.h	4;"	d
CHAR_MAX	src\lib\limits.h	12;"	d
CHAR_MAX	src\lib\limits.h	15;"	d
CHAR_MIN	src\lib\limits.h	11;"	d
CHAR_MIN	src\lib\limits.h	14;"	d
INT_MAX	src\lib\limits.h	22;"	d
INT_MIN	src\lib\limits.h	23;"	d
LLONG_MAX	src\lib\limits.h	30;"	d
LLONG_MIN	src\lib\limits.h	31;"	d
LONG_MAX	src\lib\limits.h	26;"	d
LONG_MIN	src\lib\limits.h	27;"	d
SCHAR_MAX	src\lib\limits.h	6;"	d
SCHAR_MIN	src\lib\limits.h	7;"	d
SHRT_MAX	src\lib\limits.h	18;"	d
SHRT_MIN	src\lib\limits.h	19;"	d
UCHAR_MAX	src\lib\limits.h	8;"	d
UINT_MAX	src\lib\limits.h	24;"	d
ULLONG_MAX	src\lib\limits.h	32;"	d
ULONG_MAX	src\lib\limits.h	28;"	d
USHRT_MAX	src\lib\limits.h	20;"	d
__LIB_LIMITS_H	src\lib\limits.h	2;"	d
PACKED	src\lib\packed.h	8;"	d
__LIB_PACKED_H	src\lib\packed.h	2;"	d
inited	src\lib\random.c	/^static bool inited;     $/;"	v	file:
random_bytes	src\lib\random.c	/^random_bytes (void *buf_, size_t size) $/;"	f
random_init	src\lib\random.c	/^random_init (unsigned seed)$/;"	f
random_ulong	src\lib\random.c	/^random_ulong (void) $/;"	f
s	src\lib\random.c	/^static uint8_t s[256];          \/* S[]. *\/$/;"	v	file:
s_i	src\lib\random.c	/^static uint8_t s_i, s_j;        \/* i, j. *\/$/;"	v	file:
s_j	src\lib\random.c	/^static uint8_t s_i, s_j;        \/* i, j. *\/$/;"	v	file:
swap_byte	src\lib\random.c	/^swap_byte (uint8_t *a, uint8_t *b) $/;"	f	file:
__LIB_RANDOM_H	src\lib\random.h	2;"	d
DIV_ROUND_UP	src\lib\round.h	10;"	d
ROUND_DOWN	src\lib\round.h	14;"	d
ROUND_UP	src\lib\round.h	6;"	d
__LIB_ROUND_H	src\lib\round.h	2;"	d
__LIB_STDARG_H	src\lib\stdarg.h	2;"	d
va_arg	src\lib\stdarg.h	11;"	d
va_copy	src\lib\stdarg.h	12;"	d
va_end	src\lib\stdarg.h	10;"	d
va_list	src\lib\stdarg.h	/^typedef __builtin_va_list va_list;$/;"	t
va_start	src\lib\stdarg.h	9;"	d
__LIB_STDBOOL_H	src\lib\stdbool.h	2;"	d
__bool_true_false_are_defined	src\lib\stdbool.h	7;"	d
bool	src\lib\stdbool.h	4;"	d
false	src\lib\stdbool.h	6;"	d
true	src\lib\stdbool.h	5;"	d
NULL	src\lib\stddef.h	4;"	d
__LIB_STDDEF_H	src\lib\stddef.h	2;"	d
offsetof	src\lib\stddef.h	5;"	d
ptrdiff_t	src\lib\stddef.h	/^typedef __PTRDIFF_TYPE__ ptrdiff_t;$/;"	t
size_t	src\lib\stddef.h	/^typedef __SIZE_TYPE__ size_t;$/;"	t
INT16_MAX	src\lib\stdint.h	9;"	d
INT16_MIN	src\lib\stdint.h	10;"	d
INT32_MAX	src\lib\stdint.h	13;"	d
INT32_MIN	src\lib\stdint.h	14;"	d
INT64_MAX	src\lib\stdint.h	17;"	d
INT64_MIN	src\lib\stdint.h	18;"	d
INT8_MAX	src\lib\stdint.h	5;"	d
INT8_MIN	src\lib\stdint.h	6;"	d
INTMAX_MAX	src\lib\stdint.h	41;"	d
INTMAX_MIN	src\lib\stdint.h	40;"	d
INTPTR_MAX	src\lib\stdint.h	34;"	d
INTPTR_MIN	src\lib\stdint.h	33;"	d
PTRDIFF_MAX	src\lib\stdint.h	47;"	d
PTRDIFF_MIN	src\lib\stdint.h	46;"	d
SIZE_MAX	src\lib\stdint.h	49;"	d
UINT16_MAX	src\lib\stdint.h	24;"	d
UINT32_MAX	src\lib\stdint.h	27;"	d
UINT64_MAX	src\lib\stdint.h	30;"	d
UINT8_MAX	src\lib\stdint.h	21;"	d
UINTMAX_MAX	src\lib\stdint.h	44;"	d
UINTPTR_MAX	src\lib\stdint.h	37;"	d
__LIB_STDINT_H	src\lib\stdint.h	2;"	d
int16_t	src\lib\stdint.h	/^typedef signed short int int16_t;$/;"	t
int32_t	src\lib\stdint.h	/^typedef signed int int32_t;$/;"	t
int64_t	src\lib\stdint.h	/^typedef signed long long int int64_t;$/;"	t
int8_t	src\lib\stdint.h	/^typedef signed char int8_t;$/;"	t
intmax_t	src\lib\stdint.h	/^typedef int64_t intmax_t;$/;"	t
intptr_t	src\lib\stdint.h	/^typedef int32_t intptr_t;$/;"	t
uint16_t	src\lib\stdint.h	/^typedef unsigned short int uint16_t;$/;"	t
uint32_t	src\lib\stdint.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	src\lib\stdint.h	/^typedef unsigned long long int uint64_t;$/;"	t
uint8_t	src\lib\stdint.h	/^typedef unsigned char uint8_t;$/;"	t
uintmax_t	src\lib\stdint.h	/^typedef uint64_t uintmax_t;$/;"	t
uintptr_t	src\lib\stdint.h	/^typedef uint32_t uintptr_t;$/;"	t
CHAR	src\lib\stdio.c	/^        CHAR = 1,               \/* hh *\/$/;"	e	enum:printf_conversion::__anon3	file:
GROUP	src\lib\stdio.c	/^        GROUP = 1 << 5          \/* '\\'' *\/$/;"	e	enum:printf_conversion::__anon2	file:
INT	src\lib\stdio.c	/^        INT = 3,                \/* (none) *\/$/;"	e	enum:printf_conversion::__anon3	file:
INTMAX	src\lib\stdio.c	/^        INTMAX = 4,             \/* j *\/$/;"	e	enum:printf_conversion::__anon3	file:
LONG	src\lib\stdio.c	/^        LONG = 5,               \/* l *\/$/;"	e	enum:printf_conversion::__anon3	file:
LONGLONG	src\lib\stdio.c	/^        LONGLONG = 6,           \/* ll *\/$/;"	e	enum:printf_conversion::__anon3	file:
MINUS	src\lib\stdio.c	/^        MINUS = 1 << 0,         \/* '-' *\/$/;"	e	enum:printf_conversion::__anon2	file:
PLUS	src\lib\stdio.c	/^        PLUS = 1 << 1,          \/* '+' *\/$/;"	e	enum:printf_conversion::__anon2	file:
POUND	src\lib\stdio.c	/^        POUND = 1 << 3,         \/* '#' *\/$/;"	e	enum:printf_conversion::__anon2	file:
PTRDIFFT	src\lib\stdio.c	/^        PTRDIFFT = 7,           \/* t *\/$/;"	e	enum:printf_conversion::__anon3	file:
SHORT	src\lib\stdio.c	/^        SHORT = 2,              \/* h *\/$/;"	e	enum:printf_conversion::__anon3	file:
SIZET	src\lib\stdio.c	/^        SIZET = 8               \/* z *\/$/;"	e	enum:printf_conversion::__anon3	file:
SPACE	src\lib\stdio.c	/^        SPACE = 1 << 2,         \/* ' ' *\/$/;"	e	enum:printf_conversion::__anon2	file:
ZERO	src\lib\stdio.c	/^        ZERO = 1 << 4,          \/* '0' *\/$/;"	e	enum:printf_conversion::__anon2	file:
__printf	src\lib\stdio.c	/^__printf (const char *format,$/;"	f
__vprintf	src\lib\stdio.c	/^__vprintf (const char *format, va_list args,$/;"	f
base	src\lib\stdio.c	/^    int base;                   \/* Base. *\/$/;"	m	struct:integer_base	file:
base_X	src\lib\stdio.c	/^static const struct integer_base base_X = {16, "0123456789ABCDEF", 'X', 4};$/;"	v	typeref:struct:integer_base	file:
base_d	src\lib\stdio.c	/^static const struct integer_base base_d = {10, "0123456789", 0, 3};$/;"	v	typeref:struct:integer_base	file:
base_o	src\lib\stdio.c	/^static const struct integer_base base_o = {8, "01234567", 0, 3};$/;"	v	typeref:struct:integer_base	file:
base_x	src\lib\stdio.c	/^static const struct integer_base base_x = {16, "0123456789abcdef", 'x', 4};$/;"	v	typeref:struct:integer_base	file:
digits	src\lib\stdio.c	/^    const char *digits;         \/* Collection of digits. *\/$/;"	m	struct:integer_base	file:
flags	src\lib\stdio.c	/^    flags;$/;"	m	struct:printf_conversion	typeref:enum:printf_conversion::__anon2	file:
format_integer	src\lib\stdio.c	/^format_integer (uintmax_t value, bool is_signed, bool negative, $/;"	f	file:
format_string	src\lib\stdio.c	/^format_string (const char *string, int length,$/;"	f	file:
group	src\lib\stdio.c	/^    int group;                  \/* Number of digits to group with ' flag. *\/$/;"	m	struct:integer_base	file:
hex_dump	src\lib\stdio.c	/^hex_dump (uintptr_t ofs, const void *buf_, size_t size, bool ascii)$/;"	f
integer_base	src\lib\stdio.c	/^struct integer_base $/;"	s	file:
length	src\lib\stdio.c	/^    int length;         \/* Length of output string. *\/$/;"	m	struct:vsnprintf_aux	file:
max_length	src\lib\stdio.c	/^    int max_length;     \/* Max length of output string. *\/$/;"	m	struct:vsnprintf_aux	file:
output_dup	src\lib\stdio.c	/^output_dup (char ch, size_t cnt, void (*output) (char, void *), void *aux) $/;"	f	file:
p	src\lib\stdio.c	/^    char *p;            \/* Current output position. *\/$/;"	m	struct:vsnprintf_aux	file:
parse_conversion	src\lib\stdio.c	/^parse_conversion (const char *format, struct printf_conversion *c,$/;"	f	file:
precision	src\lib\stdio.c	/^    int precision;$/;"	m	struct:printf_conversion	file:
print_human_readable_size	src\lib\stdio.c	/^print_human_readable_size (uint64_t size) $/;"	f
printf	src\lib\stdio.c	/^printf (const char *format, ...) $/;"	f
printf_conversion	src\lib\stdio.c	/^struct printf_conversion $/;"	s	file:
snprintf	src\lib\stdio.c	/^snprintf (char *buffer, size_t buf_size, const char *format, ...) $/;"	f
type	src\lib\stdio.c	/^    type;$/;"	m	struct:printf_conversion	typeref:enum:printf_conversion::__anon3	file:
vsnprintf	src\lib\stdio.c	/^vsnprintf (char *buffer, size_t buf_size, const char *format, va_list args) $/;"	f
vsnprintf_aux	src\lib\stdio.c	/^struct vsnprintf_aux $/;"	s	file:
vsnprintf_helper	src\lib\stdio.c	/^vsnprintf_helper (char ch, void *aux_)$/;"	f	file:
width	src\lib\stdio.c	/^    int width;$/;"	m	struct:printf_conversion	file:
x	src\lib\stdio.c	/^    int x;                      \/* `x' character to use, for base 16 only. *\/$/;"	m	struct:integer_base	file:
STDIN_FILENO	src\lib\stdio.h	15;"	d
STDOUT_FILENO	src\lib\stdio.h	16;"	d
__LIB_STDIO_H	src\lib\stdio.h	2;"	d
sprintf	src\lib\stdio.h	37;"	d
vsprintf	src\lib\stdio.h	38;"	d
atoi	src\lib\stdlib.c	/^atoi (const char *s) $/;"	f
binary_search	src\lib\stdlib.c	/^binary_search (const void *key, const void *array, size_t cnt, size_t size,$/;"	f
bsearch	src\lib\stdlib.c	/^bsearch (const void *key, const void *array, size_t cnt,$/;"	f
compare_thunk	src\lib\stdlib.c	/^compare_thunk (const void *a, const void *b, void *aux) $/;"	f	file:
do_compare	src\lib\stdlib.c	/^do_compare (unsigned char *array, size_t a_idx, size_t b_idx, size_t size,$/;"	f	file:
do_swap	src\lib\stdlib.c	/^do_swap (unsigned char *array, size_t a_idx, size_t b_idx, size_t size)$/;"	f	file:
heapify	src\lib\stdlib.c	/^heapify (unsigned char *array, size_t i, size_t cnt, size_t size,$/;"	f	file:
qsort	src\lib\stdlib.c	/^qsort (void *array, size_t cnt, size_t size,$/;"	f
sort	src\lib\stdlib.c	/^sort (void *array, size_t cnt, size_t size,$/;"	f
__LIB_STDLIB_H	src\lib\stdlib.h	2;"	d
memchr	src\lib\string.c	/^memchr (const void *block_, int ch_, size_t size) $/;"	f
memcmp	src\lib\string.c	/^memcmp (const void *a_, const void *b_, size_t size) $/;"	f
memcpy	src\lib\string.c	/^memcpy (void *dst_, const void *src_, size_t size) $/;"	f
memmove	src\lib\string.c	/^memmove (void *dst_, const void *src_, size_t size) $/;"	f
memset	src\lib\string.c	/^memset (void *dst_, int value, size_t size) $/;"	f
strchr	src\lib\string.c	/^strchr (const char *string, int c_) $/;"	f
strcmp	src\lib\string.c	/^strcmp (const char *a_, const char *b_) $/;"	f
strcspn	src\lib\string.c	/^strcspn (const char *string, const char *stop) $/;"	f
strlcat	src\lib\string.c	/^strlcat (char *dst, const char *src, size_t size) $/;"	f
strlcpy	src\lib\string.c	/^strlcpy (char *dst, const char *src, size_t size) $/;"	f
strlen	src\lib\string.c	/^strlen (const char *string) $/;"	f
strnlen	src\lib\string.c	/^strnlen (const char *string, size_t maxlen) $/;"	f
strpbrk	src\lib\string.c	/^strpbrk (const char *string, const char *stop) $/;"	f
strrchr	src\lib\string.c	/^strrchr (const char *string, int c_) $/;"	f
strspn	src\lib\string.c	/^strspn (const char *string, const char *skip) $/;"	f
strstr	src\lib\string.c	/^strstr (const char *haystack, const char *needle) $/;"	f
strtok_r	src\lib\string.c	/^strtok_r (char *s, const char *delimiters, char **save_ptr) $/;"	f
__LIB_STRING_H	src\lib\string.h	2;"	d
strcat	src\lib\string.h	31;"	d
strcpy	src\lib\string.h	29;"	d
strncat	src\lib\string.h	32;"	d
strncpy	src\lib\string.h	30;"	d
strtok	src\lib\string.h	33;"	d
SYS_CHDIR	src\lib\syscall-nr.h	/^    SYS_CHDIR,                  \/* Change the current directory. *\/$/;"	e	enum:__anon4
SYS_CLOSE	src\lib\syscall-nr.h	/^    SYS_CLOSE,                  \/* Close a file. *\/$/;"	e	enum:__anon4
SYS_CREATE	src\lib\syscall-nr.h	/^    SYS_CREATE,                 \/* Create a file. *\/$/;"	e	enum:__anon4
SYS_EXEC	src\lib\syscall-nr.h	/^    SYS_EXEC,                   \/* Start another process. *\/$/;"	e	enum:__anon4
SYS_EXIT	src\lib\syscall-nr.h	/^    SYS_EXIT,                   \/* Terminate this process. *\/$/;"	e	enum:__anon4
SYS_FILESIZE	src\lib\syscall-nr.h	/^    SYS_FILESIZE,               \/* Obtain a file's size. *\/$/;"	e	enum:__anon4
SYS_HALT	src\lib\syscall-nr.h	/^    SYS_HALT,                   \/* Halt the operating system. *\/$/;"	e	enum:__anon4
SYS_INUMBER	src\lib\syscall-nr.h	/^    SYS_INUMBER                 \/* Returns the inode number for a fd. *\/$/;"	e	enum:__anon4
SYS_ISDIR	src\lib\syscall-nr.h	/^    SYS_ISDIR,                  \/* Tests if a fd represents a directory. *\/$/;"	e	enum:__anon4
SYS_MKDIR	src\lib\syscall-nr.h	/^    SYS_MKDIR,                  \/* Create a directory. *\/$/;"	e	enum:__anon4
SYS_MMAP	src\lib\syscall-nr.h	/^    SYS_MMAP,                   \/* Map a file into memory. *\/$/;"	e	enum:__anon4
SYS_MUNMAP	src\lib\syscall-nr.h	/^    SYS_MUNMAP,                 \/* Remove a memory mapping. *\/$/;"	e	enum:__anon4
SYS_OPEN	src\lib\syscall-nr.h	/^    SYS_OPEN,                   \/* Open a file. *\/$/;"	e	enum:__anon4
SYS_READ	src\lib\syscall-nr.h	/^    SYS_READ,                   \/* Read from a file. *\/$/;"	e	enum:__anon4
SYS_READDIR	src\lib\syscall-nr.h	/^    SYS_READDIR,                \/* Reads a directory entry. *\/$/;"	e	enum:__anon4
SYS_REMOVE	src\lib\syscall-nr.h	/^    SYS_REMOVE,                 \/* Delete a file. *\/$/;"	e	enum:__anon4
SYS_SEEK	src\lib\syscall-nr.h	/^    SYS_SEEK,                   \/* Change position in a file. *\/$/;"	e	enum:__anon4
SYS_TELL	src\lib\syscall-nr.h	/^    SYS_TELL,                   \/* Report current position in a file. *\/$/;"	e	enum:__anon4
SYS_WAIT	src\lib\syscall-nr.h	/^    SYS_WAIT,                   \/* Wait for a child process to die. *\/$/;"	e	enum:__anon4
SYS_WRITE	src\lib\syscall-nr.h	/^    SYS_WRITE,                  \/* Write to a file. *\/$/;"	e	enum:__anon4
__LIB_SYSCALL_NR_H	src\lib\syscall-nr.h	2;"	d
add_char	src\lib\user\console.c	/^add_char (char c, void *aux_) $/;"	f	file:
buf	src\lib\user\console.c	/^    char buf[64];       \/* Character buffer. *\/$/;"	m	struct:vhprintf_aux	file:
char_cnt	src\lib\user\console.c	/^    int char_cnt;       \/* Total characters written so far. *\/$/;"	m	struct:vhprintf_aux	file:
flush	src\lib\user\console.c	/^flush (struct vhprintf_aux *aux)$/;"	f	file:
handle	src\lib\user\console.c	/^    int handle;         \/* Output file handle. *\/$/;"	m	struct:vhprintf_aux	file:
hprintf	src\lib\user\console.c	/^hprintf (int handle, const char *format, ...) $/;"	f
p	src\lib\user\console.c	/^    char *p;            \/* Current position in buffer. *\/$/;"	m	struct:vhprintf_aux	file:
putchar	src\lib\user\console.c	/^putchar (int c) $/;"	f
puts	src\lib\user\console.c	/^puts (const char *s) $/;"	f
vhprintf	src\lib\user\console.c	/^vhprintf (int handle, const char *format, va_list args) $/;"	f
vhprintf_aux	src\lib\user\console.c	/^struct vhprintf_aux $/;"	s	file:
vprintf	src\lib\user\console.c	/^vprintf (const char *format, va_list args) $/;"	f
debug_panic	src\lib\user\debug.c	/^debug_panic (const char *file, int line, const char *function,$/;"	f
_start	src\lib\user\entry.c	/^_start (int argc, char *argv[]) $/;"	f
chdir	src\lib\user\oldsyscall.c	/^chdir (const char *dir)$/;"	f
close	src\lib\user\oldsyscall.c	/^close (int fd)$/;"	f
create	src\lib\user\oldsyscall.c	/^create (const char *file, unsigned initial_size)$/;"	f
exec	src\lib\user\oldsyscall.c	/^exec (const char *file)$/;"	f
exit	src\lib\user\oldsyscall.c	/^exit (int status)$/;"	f
filesize	src\lib\user\oldsyscall.c	/^filesize (int fd) $/;"	f
halt	src\lib\user\oldsyscall.c	/^halt (void) $/;"	f
inumber	src\lib\user\oldsyscall.c	/^inumber (int fd) $/;"	f
isdir	src\lib\user\oldsyscall.c	/^isdir (int fd) $/;"	f
mkdir	src\lib\user\oldsyscall.c	/^mkdir (const char *dir)$/;"	f
mmap	src\lib\user\oldsyscall.c	/^mmap (int fd, void *addr)$/;"	f
munmap	src\lib\user\oldsyscall.c	/^munmap (mapid_t mapid)$/;"	f
open	src\lib\user\oldsyscall.c	/^open (const char *file)$/;"	f
read	src\lib\user\oldsyscall.c	/^read (int fd, void *buffer, unsigned size)$/;"	f
readdir	src\lib\user\oldsyscall.c	/^readdir (int fd, char name[READDIR_MAX_LEN + 1]) $/;"	f
remove	src\lib\user\oldsyscall.c	/^remove (const char *file)$/;"	f
seek	src\lib\user\oldsyscall.c	/^seek (int fd, unsigned position) $/;"	f
syscall0	src\lib\user\oldsyscall.c	6;"	d	file:
syscall1	src\lib\user\oldsyscall.c	19;"	d	file:
syscall2	src\lib\user\oldsyscall.c	33;"	d	file:
syscall3	src\lib\user\oldsyscall.c	49;"	d	file:
tell	src\lib\user\oldsyscall.c	/^tell (int fd) $/;"	f
wait	src\lib\user\oldsyscall.c	/^wait (pid_t pid)$/;"	f
write	src\lib\user\oldsyscall.c	/^write (int fd, const void *buffer, unsigned size)$/;"	f
__LIB_USER_STDIO_H	src\lib\user\stdio.h	2;"	d
chdir	src\lib\user\syscall.c	/^chdir (const char *dir)$/;"	f
close	src\lib\user\syscall.c	/^close (int fd)$/;"	f
create	src\lib\user\syscall.c	/^create (const char *file, unsigned initial_size)$/;"	f
exec	src\lib\user\syscall.c	/^exec (const char *file)$/;"	f
exit	src\lib\user\syscall.c	/^exit (int status)$/;"	f
filesize	src\lib\user\syscall.c	/^filesize (int fd) $/;"	f
halt	src\lib\user\syscall.c	/^halt (void) $/;"	f
inumber	src\lib\user\syscall.c	/^inumber (int fd) $/;"	f
isdir	src\lib\user\syscall.c	/^isdir (int fd) $/;"	f
mkdir	src\lib\user\syscall.c	/^mkdir (const char *dir)$/;"	f
mmap	src\lib\user\syscall.c	/^mmap (int fd, void *addr)$/;"	f
munmap	src\lib\user\syscall.c	/^munmap (mapid_t mapid)$/;"	f
open	src\lib\user\syscall.c	/^open (const char *file)$/;"	f
read	src\lib\user\syscall.c	/^read (int fd, void *buffer, unsigned size)$/;"	f
readdir	src\lib\user\syscall.c	/^readdir (int fd, char name[READDIR_MAX_LEN + 1]) $/;"	f
remove	src\lib\user\syscall.c	/^remove (const char *file)$/;"	f
seek	src\lib\user\syscall.c	/^seek (int fd, unsigned position) $/;"	f
syscall0	src\lib\user\syscall.c	7;"	d	file:
syscall1	src\lib\user\syscall.c	20;"	d	file:
syscall2	src\lib\user\syscall.c	34;"	d	file:
syscall3	src\lib\user\syscall.c	51;"	d	file:
tell	src\lib\user\syscall.c	/^tell (int fd) $/;"	f
wait	src\lib\user\syscall.c	/^wait (pid_t pid)$/;"	f
write	src\lib\user\syscall.c	/^write (int fd, const void *buffer, unsigned size)$/;"	f
EXIT_FAILURE	src\lib\user\syscall.h	20;"	d
EXIT_SUCCESS	src\lib\user\syscall.h	19;"	d
MAP_FAILED	src\lib\user\syscall.h	13;"	d
PID_ERROR	src\lib\user\syscall.h	9;"	d
READDIR_MAX_LEN	src\lib\user\syscall.h	16;"	d
__LIB_USER_SYSCALL_H	src\lib\user\syscall.h	2;"	d
mapid_t	src\lib\user\syscall.h	/^typedef int mapid_t;$/;"	t
pid_t	src\lib\user\syscall.h	/^typedef int pid_t;$/;"	t
PACKED	src\lib\ustar.c	/^PACKED;$/;"	v	typeref:struct:ustar_header
calculate_chksum	src\lib\ustar.c	/^calculate_chksum (const struct ustar_header *h)$/;"	f	file:
chksum	src\lib\ustar.c	/^    char chksum[8];             \/* Sum of octets in header as octal string. *\/$/;"	m	struct:ustar_header	file:
devmajor	src\lib\ustar.c	/^    char devmajor[8];           \/* Device major number as octal string. *\/$/;"	m	struct:ustar_header	file:
devminor	src\lib\ustar.c	/^    char devminor[8];           \/* Device minor number as octal string. *\/$/;"	m	struct:ustar_header	file:
gid	src\lib\ustar.c	/^    char gid[8];                \/* Group ID as octal string. *\/$/;"	m	struct:ustar_header	file:
gname	src\lib\ustar.c	/^    char gname[32];             \/* Group name, always null-terminated. *\/$/;"	m	struct:ustar_header	file:
is_all_zeros	src\lib\ustar.c	/^is_all_zeros (const char *block, size_t cnt)$/;"	f	file:
linkname	src\lib\ustar.c	/^    char linkname[100];         \/* Name of link target.$/;"	m	struct:ustar_header	file:
magic	src\lib\ustar.c	/^    char magic[6];              \/* "ustar\\0" *\/$/;"	m	struct:ustar_header	file:
mode	src\lib\ustar.c	/^    char mode[8];               \/* Permissions as octal string. *\/$/;"	m	struct:ustar_header	file:
mtime	src\lib\ustar.c	/^    char mtime[12];             \/* Modification time in seconds$/;"	m	struct:ustar_header	file:
name	src\lib\ustar.c	/^    char name[100];             \/* File name.  Null-terminated if room. *\/$/;"	m	struct:ustar_header	file:
padding	src\lib\ustar.c	/^    char padding[12];           \/* Pad to 512 bytes. *\/$/;"	m	struct:ustar_header	file:
parse_octal_field	src\lib\ustar.c	/^parse_octal_field (const char *s, size_t size, unsigned long int *value)$/;"	f	file:
prefix	src\lib\ustar.c	/^    char prefix[155];           \/* Prefix to file name.$/;"	m	struct:ustar_header	file:
size	src\lib\ustar.c	/^    char size[12];              \/* File size in bytes as octal string. *\/$/;"	m	struct:ustar_header	file:
strip_antisocial_prefixes	src\lib\ustar.c	/^strip_antisocial_prefixes (const char *file_name)$/;"	f	file:
typeflag	src\lib\ustar.c	/^    char typeflag;              \/* An enum ustar_type value. *\/$/;"	m	struct:ustar_header	file:
uid	src\lib\ustar.c	/^    char uid[8];                \/* User ID as octal string. *\/$/;"	m	struct:ustar_header	file:
uname	src\lib\ustar.c	/^    char uname[32];             \/* User name, always null-terminated. *\/$/;"	m	struct:ustar_header	file:
ustar_header	src\lib\ustar.c	/^struct ustar_header$/;"	s	file:
ustar_make_header	src\lib\ustar.c	/^ustar_make_header (const char *file_name, enum ustar_type type,$/;"	f
ustar_parse_header	src\lib\ustar.c	/^ustar_parse_header (const char header[USTAR_HEADER_SIZE],$/;"	f
version	src\lib\ustar.c	/^    char version[2];            \/* "00" *\/$/;"	m	struct:ustar_header	file:
USTAR_DIRECTORY	src\lib\ustar.h	/^    USTAR_DIRECTORY = '5',      \/* Directory. *\/$/;"	e	enum:ustar_type
USTAR_EOF	src\lib\ustar.h	/^    USTAR_EOF = -1              \/* End of archive (not an official value). *\/$/;"	e	enum:ustar_type
USTAR_HEADER_SIZE	src\lib\ustar.h	21;"	d
USTAR_REGULAR	src\lib\ustar.h	/^    USTAR_REGULAR = '0',        \/* Ordinary file. *\/$/;"	e	enum:ustar_type
__LIB_USTAR_H	src\lib\ustar.h	2;"	d
ustar_type	src\lib\ustar.h	/^enum ustar_type$/;"	g
Algorithm::Diff	src\tests\Algorithm\Diff.pm	/^package Algorithm::Diff;$/;"	p
Algorithm::Diff::_impl	src\tests\Algorithm\Diff.pm	/^package Algorithm::Diff::_impl;$/;"	p
Base	src\tests\Algorithm\Diff.pm	/^sub Base$/;"	s
Copy	src\tests\Algorithm\Diff.pm	/^sub Copy$/;"	s
Die	src\tests\Algorithm\Diff.pm	/^sub Die$/;"	s
Diff	src\tests\Algorithm\Diff.pm	/^sub Diff {$/;"	s
Get	src\tests\Algorithm\Diff.pm	/^sub Get$/;"	s
Items	src\tests\Algorithm\Diff.pm	/^sub Items {$/;"	s
LCS	src\tests\Algorithm\Diff.pm	/^sub LCS$/;"	s
LCS_length	src\tests\Algorithm\Diff.pm	/^sub LCS_length$/;"	s
LCSidx	src\tests\Algorithm\Diff.pm	/^sub LCSidx$/;"	s
Max	src\tests\Algorithm\Diff.pm	/^sub Max {$/;"	s
Min	src\tests\Algorithm\Diff.pm	/^sub Min {$/;"	s
Next	src\tests\Algorithm\Diff.pm	/^sub Next {$/;"	s
Prev	src\tests\Algorithm\Diff.pm	/^sub Prev {$/;"	s
Range	src\tests\Algorithm\Diff.pm	/^sub Range {$/;"	s
Reset	src\tests\Algorithm\Diff.pm	/^sub Reset$/;"	s
Same	src\tests\Algorithm\Diff.pm	/^sub Same {$/;"	s
_Base	src\tests\Algorithm\Diff.pm	/^sub _Base() { 5 } # $me->[_Base]: Added to range's min and max$/;"	s
_ChkPos	src\tests\Algorithm\Diff.pm	/^sub _ChkPos$/;"	s
_ChkSeq	src\tests\Algorithm\Diff.pm	/^sub _ChkSeq$/;"	s
_End	src\tests\Algorithm\Diff.pm	/^sub _End()  { 3 } # $me->[_End]: Diff between forward and reverse pos$/;"	s
_Idx	src\tests\Algorithm\Diff.pm	/^sub _Idx()  { 0 } # $me->[_Idx]: Ref to array of hunk indices$/;"	s
_Min	src\tests\Algorithm\Diff.pm	/^sub _Min() { -2 } # Added to _Off to get min instead of max+1$/;"	s
_Off	src\tests\Algorithm\Diff.pm	/^sub _Off()  { 7 } # $me->[_Off]: Offset into _Idx for current position$/;"	s
_Pos	src\tests\Algorithm\Diff.pm	/^sub _Pos()  { 6 } # $me->[_Pos]: Which hunk is currently selected$/;"	s
_Same	src\tests\Algorithm\Diff.pm	/^sub _Same() { 4 } # $me->[_Same]: 1 if pos 1 contains unchanged items$/;"	s
_longestCommonSubsequence	src\tests\Algorithm\Diff.pm	/^sub _longestCommonSubsequence$/;"	s
_replaceNextLargerWith	src\tests\Algorithm\Diff.pm	/^sub _replaceNextLargerWith$/;"	s
_withPositionsOfInInterval	src\tests\Algorithm\Diff.pm	/^sub _withPositionsOfInInterval$/;"	s
compact_diff	src\tests\Algorithm\Diff.pm	/^sub compact_diff$/;"	s
diff	src\tests\Algorithm\Diff.pm	/^sub diff$/;"	s
getObjPkg	src\tests\Algorithm\Diff.pm	/^sub getObjPkg$/;"	s
new	src\tests\Algorithm\Diff.pm	/^sub new$/;"	s
prepare	src\tests\Algorithm\Diff.pm	/^sub prepare$/;"	s
sdiff	src\tests\Algorithm\Diff.pm	/^sub sdiff$/;"	s
traverse_balanced	src\tests\Algorithm\Diff.pm	/^sub traverse_balanced$/;"	s
traverse_sequences	src\tests\Algorithm\Diff.pm	/^sub traverse_sequences$/;"	s
arc4_crypt	src\tests\arc4.c	/^arc4_crypt (struct arc4 *arc4, void *buf_, size_t size)$/;"	f
arc4_init	src\tests\arc4.c	/^arc4_init (struct arc4 *arc4, const void *key_, size_t size)$/;"	f
swap_byte	src\tests\arc4.c	/^swap_byte (uint8_t *a, uint8_t *b)$/;"	f	file:
TESTS_ARC4_H	src\tests\arc4.h	2;"	d
arc4	src\tests\arc4.h	/^struct arc4$/;"	s
i	src\tests\arc4.h	/^    uint8_t i, j;$/;"	m	struct:arc4
j	src\tests\arc4.h	/^    uint8_t i, j;$/;"	m	struct:arc4
s	src\tests\arc4.h	/^    uint8_t s[256];$/;"	m	struct:arc4
arc4_crypt	src\tests\arc4.pm	/^sub arc4_crypt {$/;"	s
arc4_init	src\tests\arc4.pm	/^sub arc4_init {$/;"	s
cksum	src\tests\cksum.c	/^cksum (const void *b_, size_t n)$/;"	f
crctab	src\tests\cksum.c	/^static unsigned long crctab[] = {$/;"	v	file:
main	src\tests\cksum.c	/^main (void) $/;"	f
TESTS_CKSUM_H	src\tests\cksum.h	2;"	d
cksum	src\tests\cksum.pm	/^sub cksum {$/;"	s
cksum_file	src\tests\cksum.pm	/^sub cksum_file {$/;"	s
buf	src\tests\filesys\base\child-syn-read.c	/^static char buf[BUF_SIZE];$/;"	v	file:
main	src\tests\filesys\base\child-syn-read.c	/^main (int argc, const char *argv[]) $/;"	f
test_name	src\tests\filesys\base\child-syn-read.c	/^const char *test_name = "child-syn-read";$/;"	v
buf	src\tests\filesys\base\child-syn-wrt.c	/^char buf[BUF_SIZE];$/;"	v
main	src\tests\filesys\base\child-syn-wrt.c	/^main (int argc, char *argv[])$/;"	f
TEST_SIZE	src\tests\filesys\base\lg-create.c	4;"	d	file:
TEST_SIZE	src\tests\filesys\base\lg-full.c	5;"	d	file:
BLOCK_SIZE	src\tests\filesys\base\lg-random.c	5;"	d	file:
TEST_SIZE	src\tests\filesys\base\lg-random.c	6;"	d	file:
BLOCK_SIZE	src\tests\filesys\base\lg-seq-block.c	6;"	d	file:
TEST_SIZE	src\tests\filesys\base\lg-seq-block.c	5;"	d	file:
TEST_SIZE	src\tests\filesys\base\lg-seq-random.c	5;"	d	file:
TEST_SIZE	src\tests\filesys\base\sm-create.c	4;"	d	file:
TEST_SIZE	src\tests\filesys\base\sm-full.c	5;"	d	file:
BLOCK_SIZE	src\tests\filesys\base\sm-random.c	5;"	d	file:
TEST_SIZE	src\tests\filesys\base\sm-random.c	6;"	d	file:
BLOCK_SIZE	src\tests\filesys\base\sm-seq-block.c	6;"	d	file:
TEST_SIZE	src\tests\filesys\base\sm-seq-block.c	5;"	d	file:
TEST_SIZE	src\tests\filesys\base\sm-seq-random.c	5;"	d	file:
CHILD_CNT	src\tests\filesys\base\syn-read.c	14;"	d	file:
buf	src\tests\filesys\base\syn-read.c	/^static char buf[BUF_SIZE];$/;"	v	file:
test_main	src\tests\filesys\base\syn-read.c	/^test_main (void) $/;"	f
BUF_SIZE	src\tests\filesys\base\syn-read.h	4;"	d
TESTS_FILESYS_BASE_SYN_READ_H	src\tests\filesys\base\syn-read.h	2;"	d
file_name	src\tests\filesys\base\syn-read.h	/^static const char file_name[] = "data";$/;"	v
buf1	src\tests\filesys\base\syn-remove.c	/^char buf1[1234];$/;"	v
buf2	src\tests\filesys\base\syn-remove.c	/^char buf2[1234];$/;"	v
test_main	src\tests\filesys\base\syn-remove.c	/^test_main (void) $/;"	f
buf1	src\tests\filesys\base\syn-write.c	/^char buf1[BUF_SIZE];$/;"	v
buf2	src\tests\filesys\base\syn-write.c	/^char buf2[BUF_SIZE];$/;"	v
test_main	src\tests\filesys\base\syn-write.c	/^test_main (void) $/;"	f
BUF_SIZE	src\tests\filesys\base\syn-write.h	6;"	d
CHILD_CNT	src\tests\filesys\base\syn-write.h	4;"	d
CHUNK_SIZE	src\tests\filesys\base\syn-write.h	5;"	d
TESTS_FILESYS_BASE_SYN_WRITE_H	src\tests\filesys\base\syn-write.h	2;"	d
file_name	src\tests\filesys\base\syn-write.h	/^static const char file_name[] = "stuff";$/;"	v
buf1	src\tests\filesys\extended\child-syn-rw.c	/^static char buf1[BUF_SIZE];$/;"	v	file:
buf2	src\tests\filesys\extended\child-syn-rw.c	/^static char buf2[BUF_SIZE];$/;"	v	file:
main	src\tests\filesys\extended\child-syn-rw.c	/^main (int argc, const char *argv[]) $/;"	f
test_name	src\tests\filesys\extended\child-syn-rw.c	/^const char *test_name = "child-syn-rw";$/;"	v
test_main	src\tests\filesys\extended\dir-empty-name.c	/^test_main (void) $/;"	f
test_main	src\tests\filesys\extended\dir-mk-tree.c	/^test_main (void) $/;"	f
test_main	src\tests\filesys\extended\dir-mkdir.c	/^test_main (void) $/;"	f
test_main	src\tests\filesys\extended\dir-open.c	/^test_main (void) $/;"	f
test_main	src\tests\filesys\extended\dir-over-file.c	/^test_main (void) $/;"	f
test_main	src\tests\filesys\extended\dir-rm-cwd.c	/^test_main (void) $/;"	f
wrap_open	src\tests\filesys\extended\dir-rm-cwd.c	/^wrap_open (const char *name) $/;"	f	file:
test_main	src\tests\filesys\extended\dir-rm-parent.c	/^test_main (void) $/;"	f
test_main	src\tests\filesys\extended\dir-rm-root.c	/^test_main (void) $/;"	f
do_remove	src\tests\filesys\extended\dir-rm-tree.c	/^do_remove (const char *format, ...) $/;"	f	file:
remove_tree	src\tests\filesys\extended\dir-rm-tree.c	/^remove_tree (int at, int bt, int ct, int dt) $/;"	f	file:
test_main	src\tests\filesys\extended\dir-rm-tree.c	/^test_main (void) $/;"	f
test_main	src\tests\filesys\extended\dir-rmdir.c	/^test_main (void) $/;"	f
test_main	src\tests\filesys\extended\dir-under-file.c	/^test_main (void) $/;"	f
test_main	src\tests\filesys\extended\dir-vine.c	/^test_main (void) $/;"	f
TEST_SIZE	src\tests\filesys\extended\grow-create.c	3;"	d	file:
DIRECTORY	src\tests\filesys\extended\grow-dir-lg.c	5;"	d	file:
FILE_CNT	src\tests\filesys\extended\grow-dir-lg.c	4;"	d	file:
buf	src\tests\filesys\extended\grow-file-size.c	/^static char buf[2134];$/;"	v	file:
check_file_size	src\tests\filesys\extended\grow-file-size.c	/^check_file_size (int fd, long ofs) $/;"	f	file:
return_block_size	src\tests\filesys\extended\grow-file-size.c	/^return_block_size (void) $/;"	f	file:
test_main	src\tests\filesys\extended\grow-file-size.c	/^test_main (void) $/;"	f
FILE_CNT	src\tests\filesys\extended\grow-root-lg.c	3;"	d	file:
FILE_CNT	src\tests\filesys\extended\grow-root-sm.c	3;"	d	file:
TEST_SIZE	src\tests\filesys\extended\grow-seq-lg.c	4;"	d	file:
TEST_SIZE	src\tests\filesys\extended\grow-seq-sm.c	4;"	d	file:
buf	src\tests\filesys\extended\grow-sparse.c	/^static char buf[76543];$/;"	v	file:
test_main	src\tests\filesys\extended\grow-sparse.c	/^test_main (void) $/;"	f
buf	src\tests\filesys\extended\grow-tell.c	/^static char buf[2134];$/;"	v	file:
check_tell	src\tests\filesys\extended\grow-tell.c	/^check_tell (int fd, long ofs) $/;"	f	file:
return_block_size	src\tests\filesys\extended\grow-tell.c	/^return_block_size (void) $/;"	f	file:
test_main	src\tests\filesys\extended\grow-tell.c	/^test_main (void) $/;"	f
FILE_SIZE	src\tests\filesys\extended\grow-two-files.c	9;"	d	file:
buf_a	src\tests\filesys\extended\grow-two-files.c	/^static char buf_a[FILE_SIZE];$/;"	v	file:
buf_b	src\tests\filesys\extended\grow-two-files.c	/^static char buf_b[FILE_SIZE];$/;"	v	file:
test_main	src\tests\filesys\extended\grow-two-files.c	/^test_main (void) $/;"	f
write_some_bytes	src\tests\filesys\extended\grow-two-files.c	/^write_some_bytes (const char *file_name, int fd, const char *buf, size_t *ofs) $/;"	f	file:
do_mkdir	src\tests\filesys\extended\mk-tree.c	/^do_mkdir (const char *format, ...) $/;"	f	file:
do_touch	src\tests\filesys\extended\mk-tree.c	/^do_touch (const char *format, ...)$/;"	f	file:
make_tree	src\tests\filesys\extended\mk-tree.c	/^make_tree (int at, int bt, int ct, int dt) $/;"	f
TESTS_FILESYS_EXTENDED_MK_TREE_H	src\tests\filesys\extended\mk-tree.h	2;"	d
CHILD_CNT	src\tests\filesys\extended\syn-rw.c	12;"	d	file:
buf	src\tests\filesys\extended\syn-rw.c	/^char buf[BUF_SIZE];$/;"	v
test_main	src\tests\filesys\extended\syn-rw.c	/^test_main (void) $/;"	f
BUF_SIZE	src\tests\filesys\extended\syn-rw.h	6;"	d
CHUNK_CNT	src\tests\filesys\extended\syn-rw.h	5;"	d
CHUNK_SIZE	src\tests\filesys\extended\syn-rw.h	4;"	d
TESTS_FILESYS_EXTENDED_SYN_RW_H	src\tests\filesys\extended\syn-rw.h	2;"	d
file_name	src\tests\filesys\extended\syn-rw.h	/^static const char file_name[] = "logfile";$/;"	v
archive_directory	src\tests\filesys\extended\tar.c	/^archive_directory (char file_name[], size_t file_name_size, int file_fd,$/;"	f	file:
archive_file	src\tests\filesys\extended\tar.c	/^archive_file (char file_name[], size_t file_name_size,$/;"	f	file:
archive_ordinary_file	src\tests\filesys\extended\tar.c	/^archive_ordinary_file (const char *file_name, int file_fd,$/;"	f	file:
do_write	src\tests\filesys\extended\tar.c	/^do_write (int fd, const char *buffer, int size, bool *write_error) $/;"	f	file:
main	src\tests\filesys\extended\tar.c	/^main (int argc, char *argv[]) $/;"	f
make_tar_archive	src\tests\filesys\extended\tar.c	/^make_tar_archive (const char *archive_name, char *files[], size_t file_cnt) $/;"	f	file:
usage	src\tests\filesys\extended\tar.c	/^usage (void) $/;"	f	file:
write_header	src\tests\filesys\extended\tar.c	/^write_header (const char *file_name, enum ustar_type type, int size,$/;"	f	file:
seq_test	src\tests\filesys\seq-test.c	/^seq_test (const char *file_name, void *buf, size_t size, size_t initial_size,$/;"	f
TESTS_FILESYS_SEQ_TEST_H	src\tests\filesys\seq-test.h	2;"	d
MAX_SIZE	src\tests\internal\list.c	19;"	d	file:
NDEBUG	src\tests\internal\list.c	10;"	d	file:
elem	src\tests\internal\list.c	/^    struct list_elem elem;      \/* List element. *\/$/;"	m	struct:value	typeref:struct:value::list_elem	file:
shuffle	src\tests\internal\list.c	/^shuffle (struct value *array, size_t cnt) $/;"	f	file:
test	src\tests\internal\list.c	/^test (void) $/;"	f
value	src\tests\internal\list.c	/^    int value;                  \/* Item value. *\/$/;"	m	struct:value	file:
value	src\tests\internal\list.c	/^struct value $/;"	s	file:
value_less	src\tests\internal\list.c	/^value_less (const struct list_elem *a_, const struct list_elem *b_,$/;"	f	file:
verify_list_bkwd	src\tests\internal\list.c	/^verify_list_bkwd (struct list *list, int size) $/;"	f	file:
verify_list_fwd	src\tests\internal\list.c	/^verify_list_fwd (struct list *list, int size) $/;"	f	file:
NDEBUG	src\tests\internal\stdio.c	10;"	d	file:
checkf	src\tests\internal\stdio.c	/^checkf (const char *expect, const char *format, ...) $/;"	f	file:
failure_cnt	src\tests\internal\stdio.c	/^static int failure_cnt;$/;"	v	file:
test	src\tests\internal\stdio.c	/^test (void) $/;"	f
MAX_CNT	src\tests\internal\stdlib.c	19;"	d	file:
NDEBUG	src\tests\internal\stdlib.c	10;"	d	file:
compare_ints	src\tests\internal\stdlib.c	/^compare_ints (const void *a_, const void *b_) $/;"	f	file:
shuffle	src\tests\internal\stdlib.c	/^shuffle (int *array, size_t cnt) $/;"	f	file:
test	src\tests\internal\stdlib.c	/^test (void) $/;"	f
verify_bsearch	src\tests\internal\stdlib.c	/^verify_bsearch (const int *array, size_t cnt) $/;"	f	file:
verify_order	src\tests\internal\stdlib.c	/^verify_order (const int *array, size_t cnt) $/;"	f	file:
check_file	src\tests\lib.c	/^check_file (const char *file_name, const void *buf, size_t size) $/;"	f
check_file_handle	src\tests\lib.c	/^check_file_handle (int fd,$/;"	f
compare_bytes	src\tests\lib.c	/^compare_bytes (const void *read_data_, const void *expected_data_, size_t size,$/;"	f
exec_children	src\tests\lib.c	/^exec_children (const char *child_name, pid_t pids[], size_t child_cnt) $/;"	f
fail	src\tests\lib.c	/^fail (const char *format, ...) $/;"	f
msg	src\tests\lib.c	/^msg (const char *format, ...) $/;"	f
quiet	src\tests\lib.c	/^bool quiet = false;$/;"	v
shuffle	src\tests\lib.c	/^shuffle (void *buf_, size_t cnt, size_t size) $/;"	f
swap	src\tests\lib.c	/^swap (void *a_, void *b_, size_t size) $/;"	f	file:
test_name	src\tests\lib.c	/^const char *test_name;$/;"	v
vmsg	src\tests\lib.c	/^vmsg (const char *format, va_list args, const char *suffix) $/;"	f	file:
wait_children	src\tests\lib.c	/^wait_children (pid_t pids[], size_t child_cnt) $/;"	f
CHECK	src\tests\lib.h	29;"	d
TESTS_LIB_H	src\tests\lib.h	2;"	d
shuffle	src\tests\lib.pm	/^sub shuffle {$/;"	s
main	src\tests\main.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
TESTS_MAIN_H	src\tests\main.h	2;"	d
random_bytes	src\tests\random.pm	/^sub random_bytes {$/;"	s
random_init	src\tests\random.pm	/^sub random_init {$/;"	s
random_ulong	src\tests\random.pm	/^sub random_ulong {$/;"	s
check_archive	src\tests\tests.pm	/^sub check_archive {$/;"	s
check_expected	src\tests\tests.pm	/^sub check_expected {$/;"	s
check_for_keyword	src\tests\tests.pm	/^sub check_for_keyword {$/;"	s
check_for_panic	src\tests\tests.pm	/^sub check_for_panic {$/;"	s
check_for_triple_fault	src\tests\tests.pm	/^sub check_for_triple_fault {$/;"	s
common_checks	src\tests\tests.pm	/^sub common_checks {$/;"	s
compare_files	src\tests\tests.pm	/^sub compare_files {$/;"	s
compare_output	src\tests\tests.pm	/^sub compare_output {$/;"	s
fail	src\tests\tests.pm	/^sub fail {$/;"	s
file_size	src\tests\tests.pm	/^sub file_size {$/;"	s
finish	src\tests\tests.pm	/^sub finish {$/;"	s
flatten_hierarchy	src\tests\tests.pm	/^sub flatten_hierarchy {$/;"	s
get_core_output	src\tests\tests.pm	/^sub get_core_output {$/;"	s
hex_dump	src\tests\tests.pm	/^sub hex_dump {$/;"	s
is_dir	src\tests\tests.pm	/^sub is_dir {$/;"	s
normalize_fs	src\tests\tests.pm	/^sub normalize_fs {$/;"	s
open_file	src\tests\tests.pm	/^sub open_file {$/;"	s
pass	src\tests\tests.pm	/^sub pass {$/;"	s
print_fs	src\tests\tests.pm	/^sub print_fs {$/;"	s
read_tar	src\tests\tests.pm	/^sub read_tar {$/;"	s
read_text_file	src\tests\tests.pm	/^sub read_text_file {$/;"	s
test_alarm_negative	src\tests\threads\alarm-negative.c	/^test_alarm_negative (void) $/;"	f
alarm_priority_thread	src\tests\threads\alarm-priority.c	/^alarm_priority_thread (void *aux UNUSED) $/;"	f	file:
alarm_priority_thread	src\tests\threads\alarm-priority.c	/^static thread_func alarm_priority_thread;$/;"	v	file:
test_alarm_priority	src\tests\threads\alarm-priority.c	/^test_alarm_priority (void) $/;"	f
wait_sema	src\tests\threads\alarm-priority.c	/^static struct semaphore wait_sema;$/;"	v	typeref:struct:semaphore	file:
wake_time	src\tests\threads\alarm-priority.c	/^static int64_t wake_time;$/;"	v	file:
iterations	src\tests\threads\alarm-simultaneous.c	/^    int iterations;             \/* Number of iterations per thread. *\/$/;"	m	struct:sleep_test	file:
output_pos	src\tests\threads\alarm-simultaneous.c	/^    int *output_pos;            \/* Current position in output buffer. *\/$/;"	m	struct:sleep_test	file:
sleep_test	src\tests\threads\alarm-simultaneous.c	/^struct sleep_test $/;"	s	file:
sleeper	src\tests\threads\alarm-simultaneous.c	/^sleeper (void *test_) $/;"	f	file:
start	src\tests\threads\alarm-simultaneous.c	/^    int64_t start;              \/* Current time at start of test. *\/$/;"	m	struct:sleep_test	file:
test_alarm_simultaneous	src\tests\threads\alarm-simultaneous.c	/^test_alarm_simultaneous (void) $/;"	f
test_sleep	src\tests\threads\alarm-simultaneous.c	/^test_sleep (int thread_cnt, int iterations) $/;"	f	file:
duration	src\tests\threads\alarm-wait.c	/^    int duration;               \/* Number of ticks to sleep. *\/$/;"	m	struct:sleep_thread	file:
id	src\tests\threads\alarm-wait.c	/^    int id;                     \/* Sleeper ID. *\/$/;"	m	struct:sleep_thread	file:
iterations	src\tests\threads\alarm-wait.c	/^    int iterations;             \/* Iterations counted so far. *\/$/;"	m	struct:sleep_thread	file:
iterations	src\tests\threads\alarm-wait.c	/^    int iterations;             \/* Number of iterations per thread. *\/$/;"	m	struct:sleep_test	file:
output_lock	src\tests\threads\alarm-wait.c	/^    struct lock output_lock;    \/* Lock protecting output buffer. *\/$/;"	m	struct:sleep_test	typeref:struct:sleep_test::lock	file:
output_pos	src\tests\threads\alarm-wait.c	/^    int *output_pos;            \/* Current position in output buffer. *\/$/;"	m	struct:sleep_test	file:
sleep_test	src\tests\threads\alarm-wait.c	/^struct sleep_test $/;"	s	file:
sleep_thread	src\tests\threads\alarm-wait.c	/^struct sleep_thread $/;"	s	file:
sleeper	src\tests\threads\alarm-wait.c	/^sleeper (void *t_) $/;"	f	file:
start	src\tests\threads\alarm-wait.c	/^    int64_t start;              \/* Current time at start of test. *\/$/;"	m	struct:sleep_test	file:
test	src\tests\threads\alarm-wait.c	/^    struct sleep_test *test;     \/* Info shared between all threads. *\/$/;"	m	struct:sleep_thread	typeref:struct:sleep_thread::sleep_test	file:
test_alarm_multiple	src\tests\threads\alarm-wait.c	/^test_alarm_multiple (void) $/;"	f
test_alarm_single	src\tests\threads\alarm-wait.c	/^test_alarm_single (void) $/;"	f
test_sleep	src\tests\threads\alarm-wait.c	/^test_sleep (int thread_cnt, int iterations) $/;"	f	file:
test_alarm_zero	src\tests\threads\alarm-zero.c	/^test_alarm_zero (void) $/;"	f
check_alarm	src\tests\threads\alarm.pm	/^sub check_alarm {$/;"	s
block_thread	src\tests\threads\mlfqs-block.c	/^block_thread (void *lock_) $/;"	f	file:
test_mlfqs_block	src\tests\threads\mlfqs-block.c	/^test_mlfqs_block (void) $/;"	f
MAX_THREAD_CNT	src\tests\threads\mlfqs-fair.c	54;"	d	file:
load_thread	src\tests\threads\mlfqs-fair.c	/^load_thread (void *ti_) $/;"	f	file:
nice	src\tests\threads\mlfqs-fair.c	/^    int nice;$/;"	m	struct:thread_info	file:
start_time	src\tests\threads\mlfqs-fair.c	/^    int64_t start_time;$/;"	m	struct:thread_info	file:
test_mlfqs_fair	src\tests\threads\mlfqs-fair.c	/^test_mlfqs_fair (int thread_cnt, int nice_min, int nice_step)$/;"	f	file:
test_mlfqs_fair_2	src\tests\threads\mlfqs-fair.c	/^test_mlfqs_fair_2 (void) $/;"	f
test_mlfqs_fair_20	src\tests\threads\mlfqs-fair.c	/^test_mlfqs_fair_20 (void) $/;"	f
test_mlfqs_nice_10	src\tests\threads\mlfqs-fair.c	/^test_mlfqs_nice_10 (void) $/;"	f
test_mlfqs_nice_2	src\tests\threads\mlfqs-fair.c	/^test_mlfqs_nice_2 (void) $/;"	f
thread_info	src\tests\threads\mlfqs-fair.c	/^struct thread_info $/;"	s	file:
tick_count	src\tests\threads\mlfqs-fair.c	/^    int tick_count;$/;"	m	struct:thread_info	file:
test_mlfqs_load_1	src\tests\threads\mlfqs-load-1.c	/^test_mlfqs_load_1 (void) $/;"	f
THREAD_CNT	src\tests\threads\mlfqs-load-60.c	112;"	d	file:
load_thread	src\tests\threads\mlfqs-load-60.c	/^load_thread (void *aux UNUSED) $/;"	f	file:
start_time	src\tests\threads\mlfqs-load-60.c	/^static int64_t start_time;$/;"	v	file:
test_mlfqs_load_60	src\tests\threads\mlfqs-load-60.c	/^test_mlfqs_load_60 (void) $/;"	f
THREAD_CNT	src\tests\threads\mlfqs-load-avg.c	123;"	d	file:
load_thread	src\tests\threads\mlfqs-load-avg.c	/^load_thread (void *seq_no_) $/;"	f	file:
start_time	src\tests\threads\mlfqs-load-avg.c	/^static int64_t start_time;$/;"	v	file:
test_mlfqs_load_avg	src\tests\threads\mlfqs-load-avg.c	/^test_mlfqs_load_avg (void) $/;"	f
test_mlfqs_recent_1	src\tests\threads\mlfqs-recent-1.c	/^test_mlfqs_recent_1 (void) $/;"	f
check_mlfqs_fair	src\tests\threads\mlfqs.pm	/^sub check_mlfqs_fair {$/;"	s
mlfqs_compare	src\tests\threads\mlfqs.pm	/^sub mlfqs_compare {$/;"	s
mlfqs_expected_load	src\tests\threads\mlfqs.pm	/^sub mlfqs_expected_load {$/;"	s
mlfqs_expected_ticks	src\tests\threads\mlfqs.pm	/^sub mlfqs_expected_ticks {$/;"	s
mlfqs_row	src\tests\threads\mlfqs.pm	/^sub mlfqs_row {$/;"	s
changing_thread	src\tests\threads\priority-change.c	/^changing_thread (void *aux UNUSED) $/;"	f	file:
changing_thread	src\tests\threads\priority-change.c	/^static thread_func changing_thread;$/;"	v	file:
test_priority_change	src\tests\threads\priority-change.c	/^test_priority_change (void) $/;"	f
condition	src\tests\threads\priority-condvar.c	/^static struct condition condition;$/;"	v	typeref:struct:condition	file:
lock	src\tests\threads\priority-condvar.c	/^static struct lock lock;$/;"	v	typeref:struct:lock	file:
priority_condvar_thread	src\tests\threads\priority-condvar.c	/^priority_condvar_thread (void *aux UNUSED) $/;"	f	file:
priority_condvar_thread	src\tests\threads\priority-condvar.c	/^static thread_func priority_condvar_thread;$/;"	v	file:
test_priority_condvar	src\tests\threads\priority-condvar.c	/^test_priority_condvar (void) $/;"	f
NESTING_DEPTH	src\tests\threads\priority-donate-chain.c	33;"	d	file:
donor_thread_func	src\tests\threads\priority-donate-chain.c	/^donor_thread_func (void *locks_) $/;"	f	file:
donor_thread_func	src\tests\threads\priority-donate-chain.c	/^static thread_func donor_thread_func;$/;"	v	file:
first	src\tests\threads\priority-donate-chain.c	/^    struct lock *first;$/;"	m	struct:lock_pair	typeref:struct:lock_pair::lock	file:
interloper_thread_func	src\tests\threads\priority-donate-chain.c	/^interloper_thread_func (void *arg_ UNUSED)$/;"	f	file:
interloper_thread_func	src\tests\threads\priority-donate-chain.c	/^static thread_func interloper_thread_func;$/;"	v	file:
lock_pair	src\tests\threads\priority-donate-chain.c	/^struct lock_pair$/;"	s	file:
second	src\tests\threads\priority-donate-chain.c	/^    struct lock *second;$/;"	m	struct:lock_pair	typeref:struct:lock_pair::lock	file:
test_priority_donate_chain	src\tests\threads\priority-donate-chain.c	/^test_priority_donate_chain (void) $/;"	f
acquire_thread_func	src\tests\threads\priority-donate-lower.c	/^acquire_thread_func (void *lock_) $/;"	f	file:
acquire_thread_func	src\tests\threads\priority-donate-lower.c	/^static thread_func acquire_thread_func;$/;"	v	file:
test_priority_donate_lower	src\tests\threads\priority-donate-lower.c	/^test_priority_donate_lower (void) $/;"	f
a_thread_func	src\tests\threads\priority-donate-multiple.c	/^a_thread_func (void *lock_) $/;"	f	file:
a_thread_func	src\tests\threads\priority-donate-multiple.c	/^static thread_func a_thread_func;$/;"	v	file:
b_thread_func	src\tests\threads\priority-donate-multiple.c	/^b_thread_func (void *lock_) $/;"	f	file:
b_thread_func	src\tests\threads\priority-donate-multiple.c	/^static thread_func b_thread_func;$/;"	v	file:
test_priority_donate_multiple	src\tests\threads\priority-donate-multiple.c	/^test_priority_donate_multiple (void) $/;"	f
a_thread_func	src\tests\threads\priority-donate-multiple2.c	/^a_thread_func (void *lock_) $/;"	f	file:
a_thread_func	src\tests\threads\priority-donate-multiple2.c	/^static thread_func a_thread_func;$/;"	v	file:
b_thread_func	src\tests\threads\priority-donate-multiple2.c	/^b_thread_func (void *lock_) $/;"	f	file:
b_thread_func	src\tests\threads\priority-donate-multiple2.c	/^static thread_func b_thread_func;$/;"	v	file:
c_thread_func	src\tests\threads\priority-donate-multiple2.c	/^c_thread_func (void *a_ UNUSED) $/;"	f	file:
c_thread_func	src\tests\threads\priority-donate-multiple2.c	/^static thread_func c_thread_func;$/;"	v	file:
test_priority_donate_multiple2	src\tests\threads\priority-donate-multiple2.c	/^test_priority_donate_multiple2 (void) $/;"	f
a	src\tests\threads\priority-donate-nest.c	/^    struct lock *a;$/;"	m	struct:locks	typeref:struct:locks::lock	file:
b	src\tests\threads\priority-donate-nest.c	/^    struct lock *b;$/;"	m	struct:locks	typeref:struct:locks::lock	file:
high_thread_func	src\tests\threads\priority-donate-nest.c	/^high_thread_func (void *lock_) $/;"	f	file:
high_thread_func	src\tests\threads\priority-donate-nest.c	/^static thread_func high_thread_func;$/;"	v	file:
locks	src\tests\threads\priority-donate-nest.c	/^struct locks $/;"	s	file:
medium_thread_func	src\tests\threads\priority-donate-nest.c	/^medium_thread_func (void *locks_) $/;"	f	file:
medium_thread_func	src\tests\threads\priority-donate-nest.c	/^static thread_func medium_thread_func;$/;"	v	file:
test_priority_donate_nest	src\tests\threads\priority-donate-nest.c	/^test_priority_donate_nest (void) $/;"	f
acquire1_thread_func	src\tests\threads\priority-donate-one.c	/^acquire1_thread_func (void *lock_) $/;"	f	file:
acquire1_thread_func	src\tests\threads\priority-donate-one.c	/^static thread_func acquire1_thread_func;$/;"	v	file:
acquire2_thread_func	src\tests\threads\priority-donate-one.c	/^acquire2_thread_func (void *lock_) $/;"	f	file:
acquire2_thread_func	src\tests\threads\priority-donate-one.c	/^static thread_func acquire2_thread_func;$/;"	v	file:
test_priority_donate_one	src\tests\threads\priority-donate-one.c	/^test_priority_donate_one (void) $/;"	f
h_thread_func	src\tests\threads\priority-donate-sema.c	/^h_thread_func (void *ls_) $/;"	f	file:
h_thread_func	src\tests\threads\priority-donate-sema.c	/^static thread_func h_thread_func;$/;"	v	file:
l_thread_func	src\tests\threads\priority-donate-sema.c	/^l_thread_func (void *ls_) $/;"	f	file:
l_thread_func	src\tests\threads\priority-donate-sema.c	/^static thread_func l_thread_func;$/;"	v	file:
lock	src\tests\threads\priority-donate-sema.c	/^    struct lock lock;$/;"	m	struct:lock_and_sema	typeref:struct:lock_and_sema::lock	file:
lock_and_sema	src\tests\threads\priority-donate-sema.c	/^struct lock_and_sema $/;"	s	file:
m_thread_func	src\tests\threads\priority-donate-sema.c	/^m_thread_func (void *ls_) $/;"	f	file:
m_thread_func	src\tests\threads\priority-donate-sema.c	/^static thread_func m_thread_func;$/;"	v	file:
sema	src\tests\threads\priority-donate-sema.c	/^    struct semaphore sema;$/;"	m	struct:lock_and_sema	typeref:struct:lock_and_sema::semaphore	file:
test_priority_donate_sema	src\tests\threads\priority-donate-sema.c	/^test_priority_donate_sema (void) $/;"	f
ITER_CNT	src\tests\threads\priority-fifo.c	27;"	d	file:
THREAD_CNT	src\tests\threads\priority-fifo.c	26;"	d	file:
id	src\tests\threads\priority-fifo.c	/^    int id;                     \/* Sleeper ID. *\/$/;"	m	struct:simple_thread_data	file:
iterations	src\tests\threads\priority-fifo.c	/^    int iterations;             \/* Iterations so far. *\/$/;"	m	struct:simple_thread_data	file:
lock	src\tests\threads\priority-fifo.c	/^    struct lock *lock;          \/* Lock on output. *\/$/;"	m	struct:simple_thread_data	typeref:struct:simple_thread_data::lock	file:
op	src\tests\threads\priority-fifo.c	/^    int **op;                   \/* Output buffer position. *\/$/;"	m	struct:simple_thread_data	file:
simple_thread_data	src\tests\threads\priority-fifo.c	/^struct simple_thread_data $/;"	s	file:
simple_thread_func	src\tests\threads\priority-fifo.c	/^simple_thread_func (void *data_) $/;"	f	file:
simple_thread_func	src\tests\threads\priority-fifo.c	/^static thread_func simple_thread_func;$/;"	v	file:
test_priority_fifo	src\tests\threads\priority-fifo.c	/^test_priority_fifo (void) $/;"	f
simple_thread_func	src\tests\threads\priority-preempt.c	/^simple_thread_func (void *aux UNUSED) $/;"	f	file:
simple_thread_func	src\tests\threads\priority-preempt.c	/^static thread_func simple_thread_func;$/;"	v	file:
test_priority_preempt	src\tests\threads\priority-preempt.c	/^test_priority_preempt (void) $/;"	f
priority_sema_thread	src\tests\threads\priority-sema.c	/^priority_sema_thread (void *aux UNUSED) $/;"	f	file:
priority_sema_thread	src\tests\threads\priority-sema.c	/^static thread_func priority_sema_thread;$/;"	v	file:
sema	src\tests\threads\priority-sema.c	/^static struct semaphore sema;$/;"	v	typeref:struct:semaphore	file:
test_priority_sema	src\tests\threads\priority-sema.c	/^test_priority_sema (void) $/;"	f
fail	src\tests\threads\tests.c	/^fail (const char *format, ...) $/;"	f
function	src\tests\threads\tests.c	/^    test_func *function;$/;"	m	struct:test	file:
msg	src\tests\threads\tests.c	/^msg (const char *format, ...) $/;"	f
name	src\tests\threads\tests.c	/^    const char *name;$/;"	m	struct:test	file:
pass	src\tests\threads\tests.c	/^pass (void) $/;"	f
run_test	src\tests\threads\tests.c	/^run_test (const char *name) $/;"	f
test	src\tests\threads\tests.c	/^struct test $/;"	s	file:
test_name	src\tests\threads\tests.c	/^static const char *test_name;$/;"	v	file:
tests	src\tests\threads\tests.c	/^static const struct test tests[] = $/;"	v	typeref:struct:test	file:
TESTS_THREADS_TESTS_H	src\tests\threads\tests.h	2;"	d
test_func	src\tests\threads\tests.h	/^typedef void test_func (void);$/;"	t
main	src\tests\userprog\args.c	/^main (int argc, char *argv[]) $/;"	f
test_main	src\tests\userprog\bad-jump.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\bad-jump2.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\bad-read.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\bad-read2.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\bad-write.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\bad-write2.c	/^test_main (void) $/;"	f
copy_string_across_boundary	src\tests\userprog\boundary.c	/^copy_string_across_boundary (const char *src) $/;"	f
dst	src\tests\userprog\boundary.c	/^static char dst[8192];$/;"	v	file:
get_boundary_area	src\tests\userprog\boundary.c	/^get_boundary_area (void) $/;"	f
TESTS_USERPROG_BOUNDARY_H	src\tests\userprog\boundary.h	2;"	d
test_main	src\tests\userprog\child-bad.c	/^test_main (void) $/;"	f
main	src\tests\userprog\child-close.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
test_name	src\tests\userprog\child-close.c	/^const char *test_name = "child-close";$/;"	v
main	src\tests\userprog\child-rox.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
test_name	src\tests\userprog\child-rox.c	/^const char *test_name = "child-rox";$/;"	v
try_write	src\tests\userprog\child-rox.c	/^try_write (void) $/;"	f	file:
main	src\tests\userprog\child-simple.c	/^main (void) $/;"	f
test_name	src\tests\userprog\child-simple.c	/^const char *test_name = "child-simple";$/;"	v
test_main	src\tests\userprog\close-bad-fd.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\close-normal.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\close-stdin.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\close-stdout.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\close-twice.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\create-bad-ptr.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\create-bound.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\create-empty.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\create-exists.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\create-long.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\create-normal.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\create-null.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\exec-arg.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\exec-bad-ptr.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\exec-missing.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\exec-multiple.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\exec-once.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\exit.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\halt.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\multi-child-fd.c	/^test_main (void) $/;"	f
main	src\tests\userprog\multi-recurse.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
test_name	src\tests\userprog\multi-recurse.c	/^const char *test_name = "multi-recurse";$/;"	v
CRASH	src\tests\userprog\no-vm\multi-oom.c	/^enum child_termination_mode { RECURSE, CRASH };$/;"	e	enum:child_termination_mode	file:
EXPECTED_DEPTH_TO_PASS	src\tests\userprog\no-vm\multi-oom.c	/^static const int EXPECTED_DEPTH_TO_PASS = 30;$/;"	v	file:
EXPECTED_REPETITIONS	src\tests\userprog\no-vm\multi-oom.c	/^static const int EXPECTED_REPETITIONS = 10;$/;"	v	file:
RECURSE	src\tests\userprog\no-vm\multi-oom.c	/^enum child_termination_mode { RECURSE, CRASH };$/;"	e	enum:child_termination_mode	file:
child_termination_mode	src\tests\userprog\no-vm\multi-oom.c	/^enum child_termination_mode { RECURSE, CRASH };$/;"	g	file:
consume_some_resources	src\tests\userprog\no-vm\multi-oom.c	/^consume_some_resources (void)$/;"	f	file:
consume_some_resources_and_die	src\tests\userprog\no-vm\multi-oom.c	/^consume_some_resources_and_die (int seed)$/;"	f	file:
main	src\tests\userprog\no-vm\multi-oom.c	/^main (int argc, char *argv[])$/;"	f
spawn_child	src\tests\userprog\no-vm\multi-oom.c	/^spawn_child (int c, enum child_termination_mode mode)$/;"	f	file:
test_name	src\tests\userprog\no-vm\multi-oom.c	/^const char *test_name = "multi-oom";$/;"	v
test_main	src\tests\userprog\open-bad-ptr.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\open-boundary.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\open-empty.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\open-missing.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\open-normal.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\open-null.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\open-twice.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\read-bad-fd.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\read-bad-ptr.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\read-boundary.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\read-normal.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\read-stdout.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\read-zero.c	/^test_main (void) $/;"	f
CHILD_CNT	src\tests\userprog\rox-child.c	4;"	d	file:
CHILD_CNT	src\tests\userprog\rox-multichild.c	4;"	d	file:
test_main	src\tests\userprog\rox-simple.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\sc-bad-arg.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\sc-bad-sp.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\sc-boundary-2.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\sc-boundary.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\wait-bad-pid.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\wait-killed.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\wait-simple.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\wait-twice.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\write-bad-fd.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\write-bad-ptr.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\write-boundary.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\write-normal.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\write-stdin.c	/^test_main (void) $/;"	f
test_main	src\tests\userprog\write-zero.c	/^test_main (void) $/;"	f
test_main	src\tests\vm\child-inherit.c	/^test_main (void)$/;"	f
SIZE	src\tests\vm\child-linear.c	12;"	d	file:
buf	src\tests\vm\child-linear.c	/^static char buf[SIZE];$/;"	v	file:
main	src\tests\vm\child-linear.c	/^main (int argc, char *argv[])$/;"	f
test_name	src\tests\vm\child-linear.c	/^const char *test_name = "child-linear";$/;"	v
ACTUAL	src\tests\vm\child-mm-wrt.c	12;"	d	file:
test_main	src\tests\vm\child-mm-wrt.c	/^test_main (void)$/;"	f
main	src\tests\vm\child-qsort-mm.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
test_name	src\tests\vm\child-qsort-mm.c	/^const char *test_name = "child-qsort-mm";$/;"	v
main	src\tests\vm\child-qsort.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
test_name	src\tests\vm\child-qsort.c	/^const char *test_name = "child-qsort";$/;"	v
buf	src\tests\vm\child-sort.c	/^unsigned char buf[128 * 1024];$/;"	v
histogram	src\tests\vm\child-sort.c	/^size_t histogram[256];$/;"	v
main	src\tests\vm\child-sort.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
test_name	src\tests\vm\child-sort.c	/^const char *test_name = "child-sort";$/;"	v
test_main	src\tests\vm\mmap-bad-fd.c	/^test_main (void) $/;"	f
test_main	src\tests\vm\mmap-clean.c	/^test_main (void)$/;"	f
ACTUAL	src\tests\vm\mmap-close.c	10;"	d	file:
test_main	src\tests\vm\mmap-close.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\mmap-exit.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\mmap-inherit.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\mmap-misalign.c	/^test_main (void) $/;"	f
test_main	src\tests\vm\mmap-null.c	/^test_main (void) $/;"	f
test_main	src\tests\vm\mmap-over-code.c	/^test_main (void) $/;"	f
test_main	src\tests\vm\mmap-over-data.c	/^test_main (void) $/;"	f
x	src\tests\vm\mmap-over-data.c	/^static char x;$/;"	v	file:
test_main	src\tests\vm\mmap-over-stk.c	/^test_main (void) $/;"	f
test_main	src\tests\vm\mmap-overlap.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\mmap-read.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\mmap-remove.c	/^test_main (void)$/;"	f
SIZE	src\tests\vm\mmap-shuffle.c	12;"	d	file:
buf	src\tests\vm\mmap-shuffle.c	/^static char *buf = (char *) 0x10000000;$/;"	v	file:
test_main	src\tests\vm\mmap-shuffle.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\mmap-twice.c	/^test_main (void)$/;"	f
ACTUAL	src\tests\vm\mmap-unmap.c	9;"	d	file:
test_main	src\tests\vm\mmap-unmap.c	/^test_main (void)$/;"	f
ACTUAL	src\tests\vm\mmap-write.c	11;"	d	file:
test_main	src\tests\vm\mmap-write.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\mmap-zero.c	/^test_main (void) $/;"	f
SIZE	src\tests\vm\page-linear.c	9;"	d	file:
buf	src\tests\vm\page-linear.c	/^static char buf[SIZE];$/;"	v	file:
test_main	src\tests\vm\page-linear.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\page-merge-mm.c	/^test_main (void) $/;"	f
test_main	src\tests\vm\page-merge-par.c	/^test_main (void) $/;"	f
CHUNK_CNT	src\tests\vm\page-merge-seq.c	15;"	d	file:
CHUNK_SIZE	src\tests\vm\page-merge-seq.c	14;"	d	file:
DATA_SIZE	src\tests\vm\page-merge-seq.c	16;"	d	file:
buf1	src\tests\vm\page-merge-seq.c	/^unsigned char buf1[DATA_SIZE], buf2[DATA_SIZE];$/;"	v
buf2	src\tests\vm\page-merge-seq.c	/^unsigned char buf1[DATA_SIZE], buf2[DATA_SIZE];$/;"	v
histogram	src\tests\vm\page-merge-seq.c	/^size_t histogram[256];$/;"	v
init	src\tests\vm\page-merge-seq.c	/^init (void) $/;"	f	file:
merge	src\tests\vm\page-merge-seq.c	/^merge (void) $/;"	f	file:
sort_chunks	src\tests\vm\page-merge-seq.c	/^sort_chunks (void)$/;"	f	file:
test_main	src\tests\vm\page-merge-seq.c	/^test_main (void)$/;"	f
verify	src\tests\vm\page-merge-seq.c	/^verify (void) $/;"	f	file:
test_main	src\tests\vm\page-merge-stk.c	/^test_main (void) $/;"	f
CHILD_CNT	src\tests\vm\page-parallel.c	7;"	d	file:
test_main	src\tests\vm\page-parallel.c	/^test_main (void)$/;"	f
SIZE	src\tests\vm\page-shuffle.c	10;"	d	file:
buf	src\tests\vm\page-shuffle.c	/^static char buf[SIZE];$/;"	v	file:
test_main	src\tests\vm\page-shuffle.c	/^test_main (void)$/;"	f
CHUNK_CNT	src\tests\vm\parallel-merge.c	14;"	d	file:
CHUNK_SIZE	src\tests\vm\parallel-merge.c	13;"	d	file:
DATA_SIZE	src\tests\vm\parallel-merge.c	15;"	d	file:
buf1	src\tests\vm\parallel-merge.c	/^unsigned char buf1[DATA_SIZE], buf2[DATA_SIZE];$/;"	v
buf2	src\tests\vm\parallel-merge.c	/^unsigned char buf1[DATA_SIZE], buf2[DATA_SIZE];$/;"	v
histogram	src\tests\vm\parallel-merge.c	/^size_t histogram[256];$/;"	v
init	src\tests\vm\parallel-merge.c	/^init (void) $/;"	f	file:
merge	src\tests\vm\parallel-merge.c	/^merge (void) $/;"	f	file:
parallel_merge	src\tests\vm\parallel-merge.c	/^parallel_merge (const char *child_name, int exit_status)$/;"	f
sort_chunks	src\tests\vm\parallel-merge.c	/^sort_chunks (const char *subprocess, int exit_status)$/;"	f	file:
verify	src\tests\vm\parallel-merge.c	/^verify (void) $/;"	f	file:
TESTS_VM_PARALLEL_MERGE	src\tests\vm\parallel-merge.h	2;"	d
check_process_death	src\tests\vm\process_death.pm	/^sub check_process_death {$/;"	s
test_main	src\tests\vm\pt-bad-addr.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\pt-bad-read.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\pt-big-stk-obj.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\pt-grow-bad.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\pt-grow-pusha.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\pt-grow-stack.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\pt-grow-stk-sc.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\pt-write-code-2.c	/^test_main (void)$/;"	f
test_main	src\tests\vm\pt-write-code.c	/^test_main (void)$/;"	f
is_partitioned	src\tests\vm\qsort.c	/^is_partitioned (const unsigned char *array, size_t size,$/;"	f	file:
is_sorted	src\tests\vm\qsort.c	/^is_sorted (const unsigned char *buf, size_t size) $/;"	f	file:
partition	src\tests\vm\qsort.c	/^partition (unsigned char *array, size_t size, int pivot) $/;"	f	file:
pick_pivot	src\tests\vm\qsort.c	/^pick_pivot (unsigned char *buf, size_t size) $/;"	f	file:
qsort_bytes	src\tests\vm\qsort.c	/^qsort_bytes (unsigned char *buf, size_t size) $/;"	f
swap	src\tests\vm\qsort.c	/^swap (unsigned char *a, unsigned char *b) $/;"	f	file:
TESTS_VM_QSORT_H	src\tests\vm\qsort.h	2;"	d
_end	src\threads\build\threads\kernel.lds.s	/^  _end = .;$/;"	d
_end_bss	src\threads\build\threads\kernel.lds.s	/^  _end_bss = .;$/;"	d
_end_kernel_text	src\threads\build\threads\kernel.lds.s	/^       _end_kernel_text = .; }$/;"	d
_signature	src\threads\build\threads\kernel.lds.s	/^     _signature = .; LONG(0xaa55aa55) }$/;"	d
_start	src\threads\build\threads\kernel.lds.s	/^  _start = 0xc0000000 + 0x20000;$/;"	d
_start_bss	src\threads\build\threads\kernel.lds.s	/^  _start_bss = .;$/;"	d
FLAG_IF	src\threads\flags.h	6;"	d
FLAG_MBS	src\threads\flags.h	5;"	d
THREADS_FLAGS_H	src\threads\flags.h	2;"	d
bss_init	src\threads\init.c	/^bss_init (void) $/;"	f	file:
filesys_bdev_name	src\threads\init.c	/^static const char *filesys_bdev_name;$/;"	v	file:
format_filesys	src\threads\init.c	/^static bool format_filesys;$/;"	v	file:
init_page_dir	src\threads\init.c	/^uint32_t *init_page_dir;$/;"	v
locate_block_device	src\threads\init.c	/^locate_block_device (enum block_type role, const char *name)$/;"	f	file:
locate_block_devices	src\threads\init.c	/^locate_block_devices (void)$/;"	f	file:
main	src\threads\init.c	/^main (void)$/;"	f
paging_init	src\threads\init.c	/^paging_init (void)$/;"	f	file:
parse_options	src\threads\init.c	/^parse_options (char **argv) $/;"	f	file:
read_command_line	src\threads\init.c	/^read_command_line (void) $/;"	f	file:
run_actions	src\threads\init.c	/^run_actions (char **argv) $/;"	f	file:
run_task	src\threads\init.c	/^run_task (char **argv)$/;"	f	file:
scratch_bdev_name	src\threads\init.c	/^static const char *scratch_bdev_name;$/;"	v	file:
swap_bdev_name	src\threads\init.c	/^static const char *swap_bdev_name;$/;"	v	file:
usage	src\threads\init.c	/^usage (void)$/;"	f	file:
user_page_limit	src\threads\init.c	/^static size_t user_page_limit = SIZE_MAX;$/;"	v	file:
THREADS_INIT_H	src\threads\init.h	2;"	d
INTR_CNT	src\threads\interrupt.c	22;"	d	file:
PIC0_CTRL	src\threads\interrupt.c	16;"	d	file:
PIC0_DATA	src\threads\interrupt.c	17;"	d	file:
PIC1_CTRL	src\threads\interrupt.c	18;"	d	file:
PIC1_DATA	src\threads\interrupt.c	19;"	d	file:
idt	src\threads\interrupt.c	/^static uint64_t idt[INTR_CNT];$/;"	v	file:
in_external_intr	src\threads\interrupt.c	/^static bool in_external_intr;   \/* Are we processing an external interrupt? *\/$/;"	v	file:
intr_context	src\threads\interrupt.c	/^intr_context (void) $/;"	f
intr_disable	src\threads\interrupt.c	/^intr_disable (void) $/;"	f
intr_dump_frame	src\threads\interrupt.c	/^intr_dump_frame (const struct intr_frame *f) $/;"	f
intr_enable	src\threads\interrupt.c	/^intr_enable (void) $/;"	f
intr_get_level	src\threads\interrupt.c	/^intr_get_level (void) $/;"	f
intr_handler	src\threads\interrupt.c	/^intr_handler (struct intr_frame *frame) $/;"	f
intr_handlers	src\threads\interrupt.c	/^static intr_handler_func *intr_handlers[INTR_CNT];$/;"	v	file:
intr_init	src\threads\interrupt.c	/^intr_init (void)$/;"	f
intr_name	src\threads\interrupt.c	/^intr_name (uint8_t vec) $/;"	f
intr_names	src\threads\interrupt.c	/^static const char *intr_names[INTR_CNT];$/;"	v	file:
intr_register_ext	src\threads\interrupt.c	/^intr_register_ext (uint8_t vec_no, intr_handler_func *handler,$/;"	f
intr_register_int	src\threads\interrupt.c	/^intr_register_int (uint8_t vec_no, int dpl, enum intr_level level,$/;"	f
intr_set_level	src\threads\interrupt.c	/^intr_set_level (enum intr_level level) $/;"	f
intr_yield_on_return	src\threads\interrupt.c	/^intr_yield_on_return (void) $/;"	f
make_gate	src\threads\interrupt.c	/^make_gate (void (*function) (void), int dpl, int type)$/;"	f	file:
make_idtr_operand	src\threads\interrupt.c	/^make_idtr_operand (uint16_t limit, void *base)$/;"	f	file:
make_intr_gate	src\threads\interrupt.c	/^make_intr_gate (void (*function) (void), int dpl)$/;"	f	file:
make_trap_gate	src\threads\interrupt.c	/^make_trap_gate (void (*function) (void), int dpl)$/;"	f	file:
pic_end_of_interrupt	src\threads\interrupt.c	/^pic_end_of_interrupt (int irq) $/;"	f	file:
pic_init	src\threads\interrupt.c	/^pic_init (void)$/;"	f	file:
register_handler	src\threads\interrupt.c	/^register_handler (uint8_t vec_no, int dpl, enum intr_level level,$/;"	f	file:
unexpected_cnt	src\threads\interrupt.c	/^static unsigned int unexpected_cnt[INTR_CNT];$/;"	v	file:
unexpected_interrupt	src\threads\interrupt.c	/^unexpected_interrupt (const struct intr_frame *f)$/;"	f	file:
yield_on_return	src\threads\interrupt.c	/^static bool yield_on_return;    \/* Should we yield on interrupt return? *\/$/;"	v	file:
INTR_OFF	src\threads\interrupt.h	/^    INTR_OFF,             \/* Interrupts disabled. *\/$/;"	e	enum:intr_level
INTR_ON	src\threads\interrupt.h	/^    INTR_ON               \/* Interrupts enabled. *\/$/;"	e	enum:intr_level
THREADS_INTERRUPT_H	src\threads\interrupt.h	2;"	d
cs	src\threads\interrupt.h	/^    uint16_t cs, :16;           \/* Code segment for eip. *\/$/;"	m	struct:intr_frame
ds	src\threads\interrupt.h	/^    uint16_t ds, :16;           \/* Saved DS segment register. *\/$/;"	m	struct:intr_frame
eax	src\threads\interrupt.h	/^    uint32_t eax;               \/* Saved EAX. *\/$/;"	m	struct:intr_frame
ebp	src\threads\interrupt.h	/^    uint32_t ebp;               \/* Saved EBP. *\/$/;"	m	struct:intr_frame
ebx	src\threads\interrupt.h	/^    uint32_t ebx;               \/* Saved EBX. *\/$/;"	m	struct:intr_frame
ecx	src\threads\interrupt.h	/^    uint32_t ecx;               \/* Saved ECX. *\/$/;"	m	struct:intr_frame
edi	src\threads\interrupt.h	/^    uint32_t edi;               \/* Saved EDI. *\/$/;"	m	struct:intr_frame
edx	src\threads\interrupt.h	/^    uint32_t edx;               \/* Saved EDX. *\/$/;"	m	struct:intr_frame
eflags	src\threads\interrupt.h	/^    uint32_t eflags;            \/* Saved CPU flags. *\/$/;"	m	struct:intr_frame
eip	src\threads\interrupt.h	/^    void (*eip) (void);         \/* Next instruction to execute. *\/$/;"	m	struct:intr_frame
error_code	src\threads\interrupt.h	/^    uint32_t error_code;        \/* Error code. *\/$/;"	m	struct:intr_frame
es	src\threads\interrupt.h	/^    uint16_t es, :16;           \/* Saved ES segment register. *\/$/;"	m	struct:intr_frame
esi	src\threads\interrupt.h	/^    uint32_t esi;               \/* Saved ESI. *\/$/;"	m	struct:intr_frame
esp	src\threads\interrupt.h	/^    void *esp;                  \/* Saved stack pointer. *\/$/;"	m	struct:intr_frame
esp_dummy	src\threads\interrupt.h	/^    uint32_t esp_dummy;         \/* Not used. *\/$/;"	m	struct:intr_frame
frame_pointer	src\threads\interrupt.h	/^    void *frame_pointer;        \/* Saved EBP (frame pointer). *\/$/;"	m	struct:intr_frame
fs	src\threads\interrupt.h	/^    uint16_t fs, :16;           \/* Saved FS segment register. *\/$/;"	m	struct:intr_frame
gs	src\threads\interrupt.h	/^    uint16_t gs, :16;           \/* Saved GS segment register. *\/$/;"	m	struct:intr_frame
intr_frame	src\threads\interrupt.h	/^struct intr_frame$/;"	s
intr_handler_func	src\threads\interrupt.h	/^typedef void intr_handler_func (struct intr_frame *);$/;"	t
intr_level	src\threads\interrupt.h	/^enum intr_level $/;"	g
ss	src\threads\interrupt.h	/^    uint16_t ss, :16;           \/* Data segment for esp. *\/$/;"	m	struct:intr_frame
vec_no	src\threads\interrupt.h	/^    uint32_t vec_no;            \/* Interrupt vector number. *\/$/;"	m	struct:intr_frame
REAL	src\threads\intr-stubs.S	/^#define REAL                                    \\$/;"	d
STUB	src\threads\intr-stubs.S	/^#define STUB(NUMBER, TYPE)                      \\$/;"	d
intr_entry	src\threads\intr-stubs.S	/^intr_entry:$/;"	l
intr_exit	src\threads\intr-stubs.S	/^intr_exit:$/;"	l
intr_stubs	src\threads\intr-stubs.S	/^intr_stubs:$/;"	l
zero	src\threads\intr-stubs.S	/^#define zero                                    \\$/;"	d
THREADS_INTR_STUBS_H	src\threads\intr-stubs.h	2;"	d
intr_stub_func	src\threads\intr-stubs.h	/^typedef void intr_stub_func (void);$/;"	t
THREADS_IO_H	src\threads\io.h	2;"	d
inb	src\threads\io.h	/^inb (uint16_t port)$/;"	f
inl	src\threads\io.h	/^inl (uint16_t port)$/;"	f
insb	src\threads\io.h	/^insb (uint16_t port, void *addr, size_t cnt)$/;"	f
insl	src\threads\io.h	/^insl (uint16_t port, void *addr, size_t cnt)$/;"	f
insw	src\threads\io.h	/^insw (uint16_t port, void *addr, size_t cnt)$/;"	f
inw	src\threads\io.h	/^inw (uint16_t port)$/;"	f
outb	src\threads\io.h	/^outb (uint16_t port, uint8_t data)$/;"	f
outl	src\threads\io.h	/^outl (uint16_t port, uint32_t data)$/;"	f
outsb	src\threads\io.h	/^outsb (uint16_t port, const void *addr, size_t cnt)$/;"	f
outsl	src\threads\io.h	/^outsl (uint16_t port, const void *addr, size_t cnt)$/;"	f
outsw	src\threads\io.h	/^outsw (uint16_t port, const void *addr, size_t cnt)$/;"	f
outw	src\threads\io.h	/^outw (uint16_t port, uint16_t data)$/;"	f
_end	src\threads\kernel.lds.S	/^  _end = .;$/;"	d
_end_bss	src\threads\kernel.lds.S	/^  _end_bss = .;$/;"	d
_end_kernel_text	src\threads\kernel.lds.S	/^	      _end_kernel_text = .; }$/;"	d
_signature	src\threads\kernel.lds.S	/^	    _signature = .; LONG(0xaa55aa55) }$/;"	d
_start	src\threads\kernel.lds.S	/^  _start = LOADER_PHYS_BASE + LOADER_KERN_BASE;$/;"	d
_start_bss	src\threads\kernel.lds.S	/^  _start_bss = .;$/;"	d
check_partition	src\threads\loader.S	/^check_partition:$/;"	l
load_kernel	src\threads\loader.S	/^load_kernel:$/;"	l
next_char	src\threads\loader.S	/^next_char:$/;"	l
next_drive	src\threads\loader.S	/^next_drive:$/;"	l
next_partition	src\threads\loader.S	/^next_partition:$/;"	l
next_sector	src\threads\loader.S	/^next_sector:$/;"	l
no_boot_partition	src\threads\loader.S	/^no_boot_partition:$/;"	l
no_such_drive	src\threads\loader.S	/^no_such_drive:$/;"	l
popa_ret	src\threads\loader.S	/^popa_ret:$/;"	l
putc	src\threads\loader.S	/^putc:	pusha$/;"	l
puts	src\threads\loader.S	/^puts:	xchg %si, %ss:(%esp)$/;"	l
read_failed	src\threads\loader.S	/^read_failed:$/;"	l
read_mbr	src\threads\loader.S	/^read_mbr:$/;"	l
read_sector	src\threads\loader.S	/^read_sector:$/;"	l
start	src\threads\loader.S	/^start:$/;"	l
LOADER_ARGS	src\threads\loader.h	18;"	d
LOADER_ARGS_LEN	src\threads\loader.h	24;"	d
LOADER_ARG_CNT	src\threads\loader.h	19;"	d
LOADER_ARG_CNT_LEN	src\threads\loader.h	25;"	d
LOADER_BASE	src\threads\loader.h	5;"	d
LOADER_END	src\threads\loader.h	6;"	d
LOADER_KERN_BASE	src\threads\loader.h	9;"	d
LOADER_PARTS	src\threads\loader.h	17;"	d
LOADER_PARTS_LEN	src\threads\loader.h	23;"	d
LOADER_PHYS_BASE	src\threads\loader.h	13;"	d
LOADER_SIG	src\threads\loader.h	16;"	d
LOADER_SIG_LEN	src\threads\loader.h	22;"	d
SEL_KCSEG	src\threads\loader.h	30;"	d
SEL_KDSEG	src\threads\loader.h	31;"	d
SEL_NULL	src\threads\loader.h	29;"	d
THREADS_LOADER_H	src\threads\loader.h	2;"	d
ARENA_MAGIC	src\threads\malloc.c	47;"	d	file:
arena	src\threads\malloc.c	/^struct arena $/;"	s	file:
arena_to_block	src\threads\malloc.c	/^arena_to_block (struct arena *a, size_t idx) $/;"	f	file:
block	src\threads\malloc.c	/^struct block $/;"	s	file:
block_size	src\threads\malloc.c	/^    size_t block_size;          \/* Size of each element in bytes. *\/$/;"	m	struct:desc	file:
block_size	src\threads\malloc.c	/^block_size (void *block) $/;"	f	file:
block_to_arena	src\threads\malloc.c	/^block_to_arena (struct block *b)$/;"	f	file:
blocks_per_arena	src\threads\malloc.c	/^    size_t blocks_per_arena;    \/* Number of blocks in an arena. *\/$/;"	m	struct:desc	file:
calloc	src\threads\malloc.c	/^calloc (size_t a, size_t b) $/;"	f
desc	src\threads\malloc.c	/^    struct desc *desc;          \/* Owning descriptor, null for big block. *\/$/;"	m	struct:arena	typeref:struct:arena::desc	file:
desc	src\threads\malloc.c	/^struct desc$/;"	s	file:
desc_cnt	src\threads\malloc.c	/^static size_t desc_cnt;         \/* Number of descriptors. *\/$/;"	v	file:
descs	src\threads\malloc.c	/^static struct desc descs[10];   \/* Descriptors. *\/$/;"	v	typeref:struct:desc	file:
free	src\threads\malloc.c	/^free (void *p) $/;"	f
free_cnt	src\threads\malloc.c	/^    size_t free_cnt;            \/* Free blocks; pages in big block. *\/$/;"	m	struct:arena	file:
free_elem	src\threads\malloc.c	/^    struct list_elem free_elem; \/* Free list element. *\/$/;"	m	struct:block	typeref:struct:block::list_elem	file:
free_list	src\threads\malloc.c	/^    struct list free_list;      \/* List of free blocks. *\/$/;"	m	struct:desc	typeref:struct:desc::list	file:
lock	src\threads\malloc.c	/^    struct lock lock;           \/* Lock. *\/$/;"	m	struct:desc	typeref:struct:desc::lock	file:
magic	src\threads\malloc.c	/^    unsigned magic;             \/* Always set to ARENA_MAGIC. *\/$/;"	m	struct:arena	file:
malloc	src\threads\malloc.c	/^malloc (size_t size) $/;"	f
malloc_init	src\threads\malloc.c	/^malloc_init (void) $/;"	f
realloc	src\threads\malloc.c	/^realloc (void *old_block, size_t new_size) $/;"	f
THREADS_MALLOC_H	src\threads\malloc.h	2;"	d
base	src\threads\palloc.c	/^    uint8_t *base;                      \/* Base of pool. *\/$/;"	m	struct:pool	file:
init_pool	src\threads\palloc.c	/^init_pool (struct pool *p, void *base, size_t page_cnt, const char *name) $/;"	f	file:
kernel_pool	src\threads\palloc.c	/^static struct pool kernel_pool, user_pool;$/;"	v	typeref:struct:pool	file:
lock	src\threads\palloc.c	/^    struct lock lock;                   \/* Mutual exclusion. *\/$/;"	m	struct:pool	typeref:struct:pool::lock	file:
page_from_pool	src\threads\palloc.c	/^page_from_pool (const struct pool *pool, void *page) $/;"	f	file:
palloc_free_multiple	src\threads\palloc.c	/^palloc_free_multiple (void *pages, size_t page_cnt) $/;"	f
palloc_free_page	src\threads\palloc.c	/^palloc_free_page (void *page) $/;"	f
palloc_get_multiple	src\threads\palloc.c	/^palloc_get_multiple (enum palloc_flags flags, size_t page_cnt)$/;"	f
palloc_get_page	src\threads\palloc.c	/^palloc_get_page (enum palloc_flags flags) $/;"	f
palloc_init	src\threads\palloc.c	/^palloc_init (size_t user_page_limit)$/;"	f
pool	src\threads\palloc.c	/^struct pool$/;"	s	file:
used_map	src\threads\palloc.c	/^    struct bitmap *used_map;            \/* Bitmap of free pages. *\/$/;"	m	struct:pool	typeref:struct:pool::bitmap	file:
user_pool	src\threads\palloc.c	/^static struct pool kernel_pool, user_pool;$/;"	v	typeref:struct:	file:
PAL_ASSERT	src\threads\palloc.h	/^    PAL_ASSERT = 001,           \/* Panic on failure. *\/$/;"	e	enum:palloc_flags
PAL_USER	src\threads\palloc.h	/^    PAL_USER = 004              \/* User page. *\/$/;"	e	enum:palloc_flags
PAL_ZERO	src\threads\palloc.h	/^    PAL_ZERO = 002,             \/* Zero page contents. *\/$/;"	e	enum:palloc_flags
THREADS_PALLOC_H	src\threads\palloc.h	2;"	d
palloc_flags	src\threads\palloc.h	/^enum palloc_flags$/;"	g
PDBITS	src\threads\pte.h	28;"	d
PDMASK	src\threads\pte.h	29;"	d
PDSHIFT	src\threads\pte.h	27;"	d
PTBITS	src\threads\pte.h	22;"	d
PTE_A	src\threads\pte.h	67;"	d
PTE_ADDR	src\threads\pte.h	62;"	d
PTE_AVL	src\threads\pte.h	63;"	d
PTE_D	src\threads\pte.h	68;"	d
PTE_FLAGS	src\threads\pte.h	61;"	d
PTE_P	src\threads\pte.h	64;"	d
PTE_U	src\threads\pte.h	66;"	d
PTE_W	src\threads\pte.h	65;"	d
PTMASK	src\threads\pte.h	24;"	d
PTSHIFT	src\threads\pte.h	21;"	d
PTSPAN	src\threads\pte.h	23;"	d
THREADS_PTE_H	src\threads\pte.h	2;"	d
pd_no	src\threads\pte.h	/^static inline uintptr_t pd_no (const void *va) {$/;"	f
pde_create	src\threads\pte.h	/^static inline uint32_t pde_create (uint32_t *pt) {$/;"	f
pde_get_pt	src\threads\pte.h	/^static inline uint32_t *pde_get_pt (uint32_t pde) {$/;"	f
pt_no	src\threads\pte.h	/^static inline unsigned pt_no (const void *va) {$/;"	f
pte_create_kernel	src\threads\pte.h	/^static inline uint32_t pte_create_kernel (void *page, bool writable) {$/;"	f
pte_create_user	src\threads\pte.h	/^static inline uint32_t pte_create_user (void *page, bool writable) {$/;"	f
pte_get_page	src\threads\pte.h	/^static inline void *pte_get_page (uint32_t pte) {$/;"	f
CR0_EM	src\threads\start.S	/^#define CR0_EM 0x00000004      \/* (Floating-point) Emulation. *\/$/;"	d
CR0_PE	src\threads\start.S	/^#define CR0_PE 0x00000001      \/* Protection Enable. *\/$/;"	d
CR0_PG	src\threads\start.S	/^#define CR0_PG 0x80000000      \/* Paging. *\/$/;"	d
CR0_WP	src\threads\start.S	/^#define CR0_WP 0x00010000      \/* Write-Protect enable in kernel mode. *\/$/;"	d
gdt	src\threads\start.S	/^gdt:$/;"	l
gdtdesc	src\threads\start.S	/^gdtdesc:$/;"	l
init_ram_pages	src\threads\start.S	/^init_ram_pages:$/;"	l
start	src\threads\start.S	/^start:$/;"	l
switch_entry	src\threads\switch.S	/^switch_entry:$/;"	l
switch_threads	src\threads\switch.S	/^switch_threads:$/;"	l
SWITCH_CUR	src\threads\switch.h	36;"	d
SWITCH_NEXT	src\threads\switch.h	37;"	d
THREADS_SWITCH_H	src\threads\switch.h	2;"	d
cur	src\threads\switch.h	/^    struct thread *cur;         \/* 20: switch_threads()'s CUR argument. *\/$/;"	m	struct:switch_threads_frame	typeref:struct:switch_threads_frame::thread
ebp	src\threads\switch.h	/^    uint32_t ebp;               \/*  8: Saved %ebp. *\/$/;"	m	struct:switch_threads_frame
ebx	src\threads\switch.h	/^    uint32_t ebx;               \/* 12: Saved %ebx. *\/$/;"	m	struct:switch_threads_frame
edi	src\threads\switch.h	/^    uint32_t edi;               \/*  0: Saved %edi. *\/$/;"	m	struct:switch_threads_frame
eip	src\threads\switch.h	/^    void (*eip) (void);         \/* 16: Return address. *\/$/;"	m	struct:switch_threads_frame
eip	src\threads\switch.h	/^    void (*eip) (void);$/;"	m	struct:switch_entry_frame
esi	src\threads\switch.h	/^    uint32_t esi;               \/*  4: Saved %esi. *\/$/;"	m	struct:switch_threads_frame
next	src\threads\switch.h	/^    struct thread *next;        \/* 24: switch_threads()'s NEXT argument. *\/$/;"	m	struct:switch_threads_frame	typeref:struct:switch_threads_frame::thread
switch_entry_frame	src\threads\switch.h	/^struct switch_entry_frame$/;"	s
switch_threads_frame	src\threads\switch.h	/^struct switch_threads_frame $/;"	s
cond_broadcast	src\threads\synch.c	/^cond_broadcast (struct condition *cond, struct lock *lock) $/;"	f
cond_init	src\threads\synch.c	/^cond_init (struct condition *cond)$/;"	f
cond_signal	src\threads\synch.c	/^cond_signal (struct condition *cond, struct lock *lock UNUSED) $/;"	f
cond_wait	src\threads\synch.c	/^cond_wait (struct condition *cond, struct lock *lock) $/;"	f
elem	src\threads\synch.c	/^    struct list_elem elem;              \/* List element. *\/$/;"	m	struct:semaphore_elem	typeref:struct:semaphore_elem::list_elem	file:
lock_acquire	src\threads\synch.c	/^lock_acquire (struct lock *lock)$/;"	f
lock_held_by_current_thread	src\threads\synch.c	/^lock_held_by_current_thread (const struct lock *lock) $/;"	f
lock_init	src\threads\synch.c	/^lock_init (struct lock *lock)$/;"	f
lock_release	src\threads\synch.c	/^lock_release (struct lock *lock) $/;"	f
lock_try_acquire	src\threads\synch.c	/^lock_try_acquire (struct lock *lock)$/;"	f
sema_down	src\threads\synch.c	/^sema_down (struct semaphore *sema) $/;"	f
sema_init	src\threads\synch.c	/^sema_init (struct semaphore *sema, unsigned value) $/;"	f
sema_self_test	src\threads\synch.c	/^sema_self_test (void) $/;"	f
sema_test_helper	src\threads\synch.c	/^sema_test_helper (void *sema_) $/;"	f	file:
sema_try_down	src\threads\synch.c	/^sema_try_down (struct semaphore *sema) $/;"	f
sema_up	src\threads\synch.c	/^sema_up (struct semaphore *sema) $/;"	f
semaphore	src\threads\synch.c	/^    struct semaphore semaphore;         \/* This semaphore. *\/$/;"	m	struct:semaphore_elem	typeref:struct:semaphore_elem::semaphore	file:
semaphore_elem	src\threads\synch.c	/^struct semaphore_elem $/;"	s	file:
THREADS_SYNCH_H	src\threads\synch.h	2;"	d
barrier	src\threads\synch.h	49;"	d
condition	src\threads\synch.h	/^struct condition $/;"	s
holder	src\threads\synch.h	/^    struct thread *holder;      \/* Thread holding lock (for debugging). *\/$/;"	m	struct:lock	typeref:struct:lock::thread
lock	src\threads\synch.h	/^struct lock $/;"	s
semaphore	src\threads\synch.h	/^    struct semaphore semaphore; \/* Binary semaphore controlling access. *\/$/;"	m	struct:lock	typeref:struct:lock::semaphore
semaphore	src\threads\synch.h	/^struct semaphore $/;"	s
value	src\threads\synch.h	/^    unsigned value;             \/* Current value. *\/$/;"	m	struct:semaphore
waiters	src\threads\synch.h	/^    struct list waiters;        \/* List of waiting threads. *\/$/;"	m	struct:condition	typeref:struct:condition::list
waiters	src\threads\synch.h	/^    struct list waiters;        \/* List of waiting threads. *\/$/;"	m	struct:semaphore	typeref:struct:semaphore::list
THREAD_MAGIC	src\threads\thread.c	22;"	d	file:
TIME_SLICE	src\threads\thread.c	55;"	d	file:
all_list	src\threads\thread.c	/^static struct list all_list;$/;"	v	typeref:struct:list	file:
alloc_frame	src\threads\thread.c	/^alloc_frame (struct thread *t, size_t size) $/;"	f	file:
allocate_tid	src\threads\thread.c	/^allocate_tid (void) $/;"	f	file:
aux	src\threads\thread.c	/^  void *aux;                  \/* Auxiliary data for function. *\/$/;"	m	struct:kernel_thread_frame	file:
eip	src\threads\thread.c	/^  void *eip;                  \/* Return address. *\/$/;"	m	struct:kernel_thread_frame	file:
function	src\threads\thread.c	/^  thread_func *function;      \/* Function to call. *\/$/;"	m	struct:kernel_thread_frame	file:
get_thread	src\threads\thread.c	/^get_thread(tid_t tid_)$/;"	f
idle	src\threads\thread.c	/^idle (void *idle_started_ UNUSED) $/;"	f	file:
idle_thread	src\threads\thread.c	/^static struct thread *idle_thread;$/;"	v	typeref:struct:thread	file:
idle_ticks	src\threads\thread.c	/^static long long idle_ticks;    \/* # of timer ticks spent idle. *\/$/;"	v	file:
init_thread	src\threads\thread.c	/^init_thread (struct thread *t, const char *name, int priority)$/;"	f	file:
initial_thread	src\threads\thread.c	/^static struct thread *initial_thread;$/;"	v	typeref:struct:thread	file:
is_thread	src\threads\thread.c	/^is_thread (struct thread *t)$/;"	f	file:
kernel_thread	src\threads\thread.c	/^kernel_thread (thread_func *function, void *aux) $/;"	f	file:
kernel_thread_frame	src\threads\thread.c	/^struct kernel_thread_frame $/;"	s	file:
kernel_ticks	src\threads\thread.c	/^static long long kernel_ticks;  \/* # of timer ticks in kernel threads. *\/$/;"	v	file:
next_thread_to_run	src\threads\thread.c	/^next_thread_to_run (void) $/;"	f	file:
ready_list	src\threads\thread.c	/^static struct list ready_list;$/;"	v	typeref:struct:list	file:
running_thread	src\threads\thread.c	/^running_thread (void) $/;"	f
schedule	src\threads\thread.c	/^schedule (void) $/;"	f	file:
thread_block	src\threads\thread.c	/^thread_block (void) $/;"	f
thread_create	src\threads\thread.c	/^thread_create (const char *name, int priority,$/;"	f
thread_current	src\threads\thread.c	/^thread_current (void) $/;"	f
thread_exit	src\threads\thread.c	/^thread_exit (void) $/;"	f
thread_foreach	src\threads\thread.c	/^thread_foreach (thread_action_func *func, void *aux)$/;"	f
thread_get_load_avg	src\threads\thread.c	/^thread_get_load_avg (void) $/;"	f
thread_get_nice	src\threads\thread.c	/^thread_get_nice (void) $/;"	f
thread_get_priority	src\threads\thread.c	/^thread_get_priority (void) $/;"	f
thread_get_recent_cpu	src\threads\thread.c	/^thread_get_recent_cpu (void) $/;"	f
thread_init	src\threads\thread.c	/^thread_init (void) $/;"	f
thread_mlfqs	src\threads\thread.c	/^bool thread_mlfqs;$/;"	v
thread_name	src\threads\thread.c	/^thread_name (void) $/;"	f
thread_print_stats	src\threads\thread.c	/^thread_print_stats (void) $/;"	f
thread_schedule_tail	src\threads\thread.c	/^thread_schedule_tail (struct thread *prev)$/;"	f
thread_set_nice	src\threads\thread.c	/^thread_set_nice (int nice UNUSED) $/;"	f
thread_set_priority	src\threads\thread.c	/^thread_set_priority (int new_priority) $/;"	f
thread_stack_ofs	src\threads\thread.c	/^uint32_t thread_stack_ofs = offsetof (struct thread, stack);$/;"	v
thread_start	src\threads\thread.c	/^thread_start (void) $/;"	f
thread_tick	src\threads\thread.c	/^thread_tick (void) $/;"	f
thread_ticks	src\threads\thread.c	/^static unsigned thread_ticks;   \/* # of timer ticks since last yield. *\/$/;"	v	file:
thread_tid	src\threads\thread.c	/^thread_tid (void) $/;"	f
thread_unblock	src\threads\thread.c	/^thread_unblock (struct thread *t) $/;"	f
thread_yield	src\threads\thread.c	/^thread_yield (void) $/;"	f
tid_lock	src\threads\thread.c	/^static struct lock tid_lock;$/;"	v	typeref:struct:lock	file:
user_ticks	src\threads\thread.c	/^static long long user_ticks;    \/* # of timer ticks in user programs. *\/$/;"	v	file:
PRI_DEFAULT	src\threads\thread.h	28;"	d
PRI_MAX	src\threads\thread.h	29;"	d
PRI_MIN	src\threads\thread.h	27;"	d
THREADS_THREAD_H	src\threads\thread.h	2;"	d
THREAD_BLOCKED	src\threads\thread.h	/^    THREAD_BLOCKED,     \/* Waiting for an event to trigger. *\/$/;"	e	enum:thread_status
THREAD_DYING	src\threads\thread.h	/^    THREAD_DYING        \/* About to be destroyed. *\/$/;"	e	enum:thread_status
THREAD_READY	src\threads\thread.h	/^    THREAD_READY,       \/* Not running but ready to run. *\/$/;"	e	enum:thread_status
THREAD_RUNNING	src\threads\thread.h	/^    THREAD_RUNNING,     \/* Running thread. *\/$/;"	e	enum:thread_status
TID_ERROR	src\threads\thread.h	24;"	d
allelem	src\threads\thread.h	/^    struct list_elem allelem;           \/* List element for all threads list. *\/$/;"	m	struct:thread	typeref:struct:thread::list_elem
child_list	src\threads\thread.h	/^    struct list child_list;                  \/* List of chlid process *\/$/;"	m	struct:thread	typeref:struct:thread::list
childelem	src\threads\thread.h	/^    struct list_elem childelem;         \/* List element for child list *\/$/;"	m	struct:thread	typeref:struct:thread::list_elem
elem	src\threads\thread.h	/^    struct list_elem elem;              \/* List element. *\/$/;"	m	struct:thread	typeref:struct:thread::list_elem
exec_file	src\threads\thread.h	/^    struct file * exec_file;            \/* file pointer of executable *\/$/;"	m	struct:thread	typeref:struct:thread::file
exitstat	src\threads\thread.h	/^    int exitstat;                       \/* To determine exit code of process*\/$/;"	m	struct:thread
fd_mapping_list	src\threads\thread.h	/^    struct list fd_mapping_list;        \/* List of fd - fp mapping *\/$/;"	m	struct:thread	typeref:struct:thread::list
loadstat	src\threads\thread.h	/^    bool loadstat;                      \/* To determine load success*\/$/;"	m	struct:thread
magic	src\threads\thread.h	/^    unsigned magic;                     \/* Detects stack overflow. *\/$/;"	m	struct:thread
name	src\threads\thread.h	/^    char name[16];                      \/* Name (for debugging purposes). *\/$/;"	m	struct:thread
pagedir	src\threads\thread.h	/^    uint32_t *pagedir;                  \/* Page directory. *\/$/;"	m	struct:thread
parent	src\threads\thread.h	/^    struct thread* parent;              \/* List of parent process *\/$/;"	m	struct:thread	typeref:struct:thread::thread
priority	src\threads\thread.h	/^    int priority;                       \/* Priority. *\/$/;"	m	struct:thread
process_name	src\threads\thread.h	/^    char* process_name;             \/* process name *\/$/;"	m	struct:thread
protectsema	src\threads\thread.h	/^    struct semaphore protectsema;       \/* Protecting child process delete *\/$/;"	m	struct:thread	typeref:struct:thread::semaphore
stack	src\threads\thread.h	/^    uint8_t *stack;                     \/* Saved stack pointer. *\/$/;"	m	struct:thread
status	src\threads\thread.h	/^    enum thread_status status;          \/* Thread state. *\/$/;"	m	struct:thread	typeref:enum:thread::thread_status
thread	src\threads\thread.h	/^struct thread$/;"	s
thread_action_func	src\threads\thread.h	/^typedef void thread_action_func (struct thread *t, void *aux);$/;"	t
thread_func	src\threads\thread.h	/^typedef void thread_func (void *aux);$/;"	t
thread_status	src\threads\thread.h	/^enum thread_status$/;"	g
tid	src\threads\thread.h	/^    tid_t tid;                          \/* Thread identifier. *\/$/;"	m	struct:thread
tid_t	src\threads\thread.h	/^typedef int tid_t;$/;"	t
waitsema	src\threads\thread.h	/^    struct semaphore waitsema;          \/* Implementing process wait *\/$/;"	m	struct:thread	typeref:struct:thread::semaphore
BITMASK	src\threads\vaddr.h	15;"	d
PGBITS	src\threads\vaddr.h	19;"	d
PGMASK	src\threads\vaddr.h	21;"	d
PGSHIFT	src\threads\vaddr.h	18;"	d
PGSIZE	src\threads\vaddr.h	20;"	d
PHYS_BASE	src\threads\vaddr.h	53;"	d
THREADS_VADDR_H	src\threads\vaddr.h	2;"	d
is_kernel_vaddr	src\threads\vaddr.h	/^is_kernel_vaddr (const void *vaddr) $/;"	f
is_user_vaddr	src\threads\vaddr.h	/^is_user_vaddr (const void *vaddr) $/;"	f
pg_no	src\threads\vaddr.h	/^static inline uintptr_t pg_no (const void *va) {$/;"	f
pg_ofs	src\threads\vaddr.h	/^static inline unsigned pg_ofs (const void *va) {$/;"	f
pg_round_down	src\threads\vaddr.h	/^static inline void *pg_round_down (const void *va) {$/;"	f
pg_round_up	src\threads\vaddr.h	/^static inline void *pg_round_up (const void *va) {$/;"	f
ptov	src\threads\vaddr.h	/^ptov (uintptr_t paddr)$/;"	f
vtop	src\threads\vaddr.h	/^vtop (const void *vaddr)$/;"	f
_end	src\userprog\build\threads\kernel.lds.s	/^  _end = .;$/;"	d
_end_bss	src\userprog\build\threads\kernel.lds.s	/^  _end_bss = .;$/;"	d
_end_kernel_text	src\userprog\build\threads\kernel.lds.s	/^       _end_kernel_text = .; }$/;"	d
_signature	src\userprog\build\threads\kernel.lds.s	/^     _signature = .; LONG(0xaa55aa55) }$/;"	d
_start	src\userprog\build\threads\kernel.lds.s	/^  _start = 0xc0000000 + 0x20000;$/;"	d
_start_bss	src\userprog\build\threads\kernel.lds.s	/^  _start_bss = .;$/;"	d
exception_init	src\userprog\exception.c	/^exception_init (void) $/;"	f
exception_print_stats	src\userprog\exception.c	/^exception_print_stats (void) $/;"	f
kill	src\userprog\exception.c	/^kill (struct intr_frame *f) $/;"	f	file:
page_fault	src\userprog\exception.c	/^page_fault (struct intr_frame *f) $/;"	f	file:
page_fault_cnt	src\userprog\exception.c	/^static long long page_fault_cnt;$/;"	v	file:
PF_P	src\userprog\exception.h	5;"	d
PF_U	src\userprog\exception.h	7;"	d
PF_W	src\userprog\exception.h	6;"	d
USERPROG_EXCEPTION_H	src\userprog\exception.h	2;"	d
CLS_CODE_DATA	src\userprog\gdt.c	/^    CLS_CODE_DATA = 1           \/* Code or data segment. *\/$/;"	e	enum:seg_class	file:
CLS_SYSTEM	src\userprog\gdt.c	/^    CLS_SYSTEM = 0,             \/* System segment. *\/$/;"	e	enum:seg_class	file:
GRAN_BYTE	src\userprog\gdt.c	/^    GRAN_BYTE = 0,              \/* Limit has 1-byte granularity. *\/$/;"	e	enum:seg_granularity	file:
GRAN_PAGE	src\userprog\gdt.c	/^    GRAN_PAGE = 1               \/* Limit has 4 kB granularity. *\/$/;"	e	enum:seg_granularity	file:
gdt	src\userprog\gdt.c	/^static uint64_t gdt[SEL_CNT];$/;"	v	file:
gdt_init	src\userprog\gdt.c	/^gdt_init (void)$/;"	f
make_code_desc	src\userprog\gdt.c	/^make_code_desc (int dpl)$/;"	f	file:
make_data_desc	src\userprog\gdt.c	/^make_data_desc (int dpl)$/;"	f	file:
make_gdtr_operand	src\userprog\gdt.c	/^make_gdtr_operand (uint16_t limit, void *base)$/;"	f	file:
make_seg_desc	src\userprog\gdt.c	/^make_seg_desc (uint32_t base,$/;"	f	file:
make_tss_desc	src\userprog\gdt.c	/^make_tss_desc (void *laddr)$/;"	f	file:
seg_class	src\userprog\gdt.c	/^enum seg_class$/;"	g	file:
seg_granularity	src\userprog\gdt.c	/^enum seg_granularity$/;"	g	file:
SEL_CNT	src\userprog\gdt.h	11;"	d
SEL_TSS	src\userprog\gdt.h	10;"	d
SEL_UCSEG	src\userprog\gdt.h	8;"	d
SEL_UDSEG	src\userprog\gdt.h	9;"	d
USERPROG_GDT_H	src\userprog\gdt.h	2;"	d
active_pd	src\userprog\pagedir.c	/^active_pd (void) $/;"	f	file:
invalidate_pagedir	src\userprog\pagedir.c	/^invalidate_pagedir (uint32_t *pd) $/;"	f	file:
lookup_page	src\userprog\pagedir.c	/^lookup_page (uint32_t *pd, const void *vaddr, bool create)$/;"	f	file:
pagedir_activate	src\userprog\pagedir.c	/^pagedir_activate (uint32_t *pd) $/;"	f
pagedir_clear_page	src\userprog\pagedir.c	/^pagedir_clear_page (uint32_t *pd, void *upage) $/;"	f
pagedir_create	src\userprog\pagedir.c	/^pagedir_create (void) $/;"	f
pagedir_destroy	src\userprog\pagedir.c	/^pagedir_destroy (uint32_t *pd) $/;"	f
pagedir_get_page	src\userprog\pagedir.c	/^pagedir_get_page (uint32_t *pd, const void *uaddr) $/;"	f
pagedir_is_accessed	src\userprog\pagedir.c	/^pagedir_is_accessed (uint32_t *pd, const void *vpage) $/;"	f
pagedir_is_dirty	src\userprog\pagedir.c	/^pagedir_is_dirty (uint32_t *pd, const void *vpage) $/;"	f
pagedir_set_accessed	src\userprog\pagedir.c	/^pagedir_set_accessed (uint32_t *pd, const void *vpage, bool accessed) $/;"	f
pagedir_set_dirty	src\userprog\pagedir.c	/^pagedir_set_dirty (uint32_t *pd, const void *vpage, bool dirty) $/;"	f
pagedir_set_page	src\userprog\pagedir.c	/^pagedir_set_page (uint32_t *pd, void *upage, void *kpage, bool writable)$/;"	f
USERPROG_PAGEDIR_H	src\userprog\pagedir.h	2;"	d
Elf32_Addr	src\userprog\process.c	/^typedef uint32_t Elf32_Word, Elf32_Addr, Elf32_Off;$/;"	t	file:
Elf32_Ehdr	src\userprog\process.c	/^struct Elf32_Ehdr$/;"	s	file:
Elf32_Half	src\userprog\process.c	/^typedef uint16_t Elf32_Half;$/;"	t	file:
Elf32_Off	src\userprog\process.c	/^typedef uint32_t Elf32_Word, Elf32_Addr, Elf32_Off;$/;"	t	file:
Elf32_Phdr	src\userprog\process.c	/^struct Elf32_Phdr$/;"	s	file:
Elf32_Word	src\userprog\process.c	/^typedef uint32_t Elf32_Word, Elf32_Addr, Elf32_Off;$/;"	t	file:
NO_RETURN	src\userprog\process.c	/^static thread_func start_process NO_RETURN;$/;"	v	file:
PE32Ax	src\userprog\process.c	302;"	d	file:
PE32Hx	src\userprog\process.c	304;"	d	file:
PE32Ox	src\userprog\process.c	303;"	d	file:
PE32Wx	src\userprog\process.c	301;"	d	file:
PF_R	src\userprog\process.c	354;"	d	file:
PF_W	src\userprog\process.c	353;"	d	file:
PF_X	src\userprog\process.c	352;"	d	file:
PT_DYNAMIC	src\userprog\process.c	344;"	d	file:
PT_INTERP	src\userprog\process.c	345;"	d	file:
PT_LOAD	src\userprog\process.c	343;"	d	file:
PT_NOTE	src\userprog\process.c	346;"	d	file:
PT_NULL	src\userprog\process.c	342;"	d	file:
PT_PHDR	src\userprog\process.c	348;"	d	file:
PT_SHLIB	src\userprog\process.c	347;"	d	file:
PT_STACK	src\userprog\process.c	349;"	d	file:
USER_BASE	src\userprog\process.c	25;"	d	file:
e_ehsize	src\userprog\process.c	/^  Elf32_Half    e_ehsize;$/;"	m	struct:Elf32_Ehdr	file:
e_entry	src\userprog\process.c	/^  Elf32_Addr    e_entry;$/;"	m	struct:Elf32_Ehdr	file:
e_flags	src\userprog\process.c	/^  Elf32_Word    e_flags;$/;"	m	struct:Elf32_Ehdr	file:
e_ident	src\userprog\process.c	/^  unsigned char e_ident[16];$/;"	m	struct:Elf32_Ehdr	file:
e_machine	src\userprog\process.c	/^  Elf32_Half    e_machine;$/;"	m	struct:Elf32_Ehdr	file:
e_phentsize	src\userprog\process.c	/^  Elf32_Half    e_phentsize;$/;"	m	struct:Elf32_Ehdr	file:
e_phnum	src\userprog\process.c	/^  Elf32_Half    e_phnum;$/;"	m	struct:Elf32_Ehdr	file:
e_phoff	src\userprog\process.c	/^  Elf32_Off     e_phoff;$/;"	m	struct:Elf32_Ehdr	file:
e_shentsize	src\userprog\process.c	/^  Elf32_Half    e_shentsize;$/;"	m	struct:Elf32_Ehdr	file:
e_shnum	src\userprog\process.c	/^  Elf32_Half    e_shnum;$/;"	m	struct:Elf32_Ehdr	file:
e_shoff	src\userprog\process.c	/^  Elf32_Off     e_shoff;$/;"	m	struct:Elf32_Ehdr	file:
e_shstrndx	src\userprog\process.c	/^  Elf32_Half    e_shstrndx;$/;"	m	struct:Elf32_Ehdr	file:
e_type	src\userprog\process.c	/^  Elf32_Half    e_type;$/;"	m	struct:Elf32_Ehdr	file:
e_version	src\userprog\process.c	/^  Elf32_Word    e_version;$/;"	m	struct:Elf32_Ehdr	file:
install_page	src\userprog\process.c	/^install_page (void *upage, void *kpage, bool writable)$/;"	f	file:
load	src\userprog\process.c	/^load (const char *file_name, void (**eip) (void), void **esp) $/;"	f
load_segment	src\userprog\process.c	/^load_segment (struct file *file, off_t ofs, uint8_t *upage,$/;"	f	file:
p_align	src\userprog\process.c	/^  Elf32_Word p_align;$/;"	m	struct:Elf32_Phdr	file:
p_filesz	src\userprog\process.c	/^  Elf32_Word p_filesz;$/;"	m	struct:Elf32_Phdr	file:
p_flags	src\userprog\process.c	/^  Elf32_Word p_flags;$/;"	m	struct:Elf32_Phdr	file:
p_memsz	src\userprog\process.c	/^  Elf32_Word p_memsz;$/;"	m	struct:Elf32_Phdr	file:
p_offset	src\userprog\process.c	/^  Elf32_Off  p_offset;$/;"	m	struct:Elf32_Phdr	file:
p_paddr	src\userprog\process.c	/^  Elf32_Addr p_paddr;$/;"	m	struct:Elf32_Phdr	file:
p_type	src\userprog\process.c	/^  Elf32_Word p_type;$/;"	m	struct:Elf32_Phdr	file:
p_vaddr	src\userprog\process.c	/^  Elf32_Addr p_vaddr;$/;"	m	struct:Elf32_Phdr	file:
process_activate	src\userprog\process.c	/^process_activate (void)$/;"	f
process_execute	src\userprog\process.c	/^process_execute (const char *file_name) $/;"	f
process_exit	src\userprog\process.c	/^process_exit (void)$/;"	f
process_wait	src\userprog\process.c	/^process_wait (tid_t child_tid UNUSED) $/;"	f
setup_stack	src\userprog\process.c	/^setup_stack (void **esp) $/;"	f	file:
start_process	src\userprog\process.c	/^start_process (void *file_name_)$/;"	f	file:
validate_segment	src\userprog\process.c	/^validate_segment (const struct Elf32_Phdr *phdr, struct file *file) $/;"	f	file:
USERPROG_PROCESS_H	src\userprog\process.h	2;"	d
PHYS_BASE	src\userprog\syscall.c	19;"	d	file:
arg_check	src\userprog\syscall.c	/^int arg_check(int syscall_number,$/;"	f
close	src\userprog\syscall.c	/^void close (int _fd)$/;"	f
create	src\userprog\syscall.c	/^bool create (const char *file, unsigned initial_size)$/;"	f
exit	src\userprog\syscall.c	/^void exit (int status)$/;"	f
filelock	src\userprog\syscall.c	/^struct lock *filelock = NULL;$/;"	v	typeref:struct:lock
filesize	src\userprog\syscall.c	/^int filesize(int _fd)$/;"	f
get_file	src\userprog\syscall.c	/^struct file * get_file(int _fd)$/;"	f
get_virtual_addr	src\userprog\syscall.c	20;"	d	file:
halt	src\userprog\syscall.c	/^void halt (void)$/;"	f
open	src\userprog\syscall.c	/^int open (const char *file)$/;"	f
read	src\userprog\syscall.c	/^int read (int _fd, void *buffer, unsigned length)$/;"	f
remove	src\userprog\syscall.c	/^bool remove (const char *file)$/;"	f
seek	src\userprog\syscall.c	/^void seek (int _fd, unsigned position)$/;"	f
syscall_handler	src\userprog\syscall.c	/^syscall_handler (struct intr_frame *f UNUSED) $/;"	f	file:
syscall_init	src\userprog\syscall.c	/^syscall_init (void) $/;"	f
tell	src\userprog\syscall.c	/^unsigned tell (int _fd)$/;"	f
write	src\userprog\syscall.c	/^int write (int _fd, const void *buffer, unsigned size)$/;"	f
USERPROG_SYSCALL_H	src\userprog\syscall.h	2;"	d
pid_t	src\userprog\syscall.h	/^typedef int pid_t;$/;"	t
back_link	src\userprog\tss.c	/^    uint16_t back_link, :16;$/;"	m	struct:tss	file:
bitmap	src\userprog\tss.c	/^    uint16_t trace, bitmap;$/;"	m	struct:tss	file:
cr3	src\userprog\tss.c	/^    uint32_t cr3;$/;"	m	struct:tss	file:
cs	src\userprog\tss.c	/^    uint16_t cs, :16;$/;"	m	struct:tss	file:
ds	src\userprog\tss.c	/^    uint16_t ds, :16;$/;"	m	struct:tss	file:
eax	src\userprog\tss.c	/^    uint32_t eax, ecx, edx, ebx;$/;"	m	struct:tss	file:
ebp	src\userprog\tss.c	/^    uint32_t esp, ebp, esi, edi;$/;"	m	struct:tss	file:
ebx	src\userprog\tss.c	/^    uint32_t eax, ecx, edx, ebx;$/;"	m	struct:tss	file:
ecx	src\userprog\tss.c	/^    uint32_t eax, ecx, edx, ebx;$/;"	m	struct:tss	file:
edi	src\userprog\tss.c	/^    uint32_t esp, ebp, esi, edi;$/;"	m	struct:tss	file:
edx	src\userprog\tss.c	/^    uint32_t eax, ecx, edx, ebx;$/;"	m	struct:tss	file:
eflags	src\userprog\tss.c	/^    uint32_t eflags;$/;"	m	struct:tss	file:
eip	src\userprog\tss.c	/^    void (*eip) (void);$/;"	m	struct:tss	file:
es	src\userprog\tss.c	/^    uint16_t es, :16;$/;"	m	struct:tss	file:
esi	src\userprog\tss.c	/^    uint32_t esp, ebp, esi, edi;$/;"	m	struct:tss	file:
esp	src\userprog\tss.c	/^    uint32_t esp, ebp, esi, edi;$/;"	m	struct:tss	file:
esp0	src\userprog\tss.c	/^    void *esp0;                         \/* Ring 0 stack virtual address. *\/$/;"	m	struct:tss	file:
esp1	src\userprog\tss.c	/^    void *esp1;$/;"	m	struct:tss	file:
esp2	src\userprog\tss.c	/^    void *esp2;$/;"	m	struct:tss	file:
fs	src\userprog\tss.c	/^    uint16_t fs, :16;$/;"	m	struct:tss	file:
gs	src\userprog\tss.c	/^    uint16_t gs, :16;$/;"	m	struct:tss	file:
ldt	src\userprog\tss.c	/^    uint16_t ldt, :16;$/;"	m	struct:tss	file:
ss	src\userprog\tss.c	/^    uint16_t ss, :16;$/;"	m	struct:tss	file:
ss0	src\userprog\tss.c	/^    uint16_t ss0, :16;                  \/* Ring 0 stack segment selector. *\/$/;"	m	struct:tss	file:
ss1	src\userprog\tss.c	/^    uint16_t ss1, :16;$/;"	m	struct:tss	file:
ss2	src\userprog\tss.c	/^    uint16_t ss2, :16;$/;"	m	struct:tss	file:
trace	src\userprog\tss.c	/^    uint16_t trace, bitmap;$/;"	m	struct:tss	file:
tss	src\userprog\tss.c	/^static struct tss *tss;$/;"	v	typeref:struct:tss	file:
tss	src\userprog\tss.c	/^struct tss$/;"	s	file:
tss_get	src\userprog\tss.c	/^tss_get (void) $/;"	f
tss_init	src\userprog\tss.c	/^tss_init (void) $/;"	f
tss_update	src\userprog\tss.c	/^tss_update (void) $/;"	f
USERPROG_TSS_H	src\userprog\tss.h	2;"	d
assemble_disk	src\utils\Pintos.pm	/^sub assemble_disk {$/;"	s
copy_file	src\utils\Pintos.pm	/^sub copy_file {$/;"	s
cyl_sectors	src\utils\Pintos.pm	/^sub cyl_sectors {$/;"	s
div_round_up	src\utils\Pintos.pm	/^sub div_round_up {$/;"	s
do_set_part	src\utils\Pintos.pm	/^sub do_set_part {$/;"	s
find_file	src\utils\Pintos.pm	/^sub find_file {$/;"	s
interpret_partition_table	src\utils\Pintos.pm	/^sub interpret_partition_table {$/;"	s
lba_to_chs	src\utils\Pintos.pm	/^sub lba_to_chs {$/;"	s
make_kernel_command_line	src\utils\Pintos.pm	/^sub make_kernel_command_line {$/;"	s
make_partition_table	src\utils\Pintos.pm	/^sub make_partition_table {$/;"	s
max	src\utils\Pintos.pm	/^sub max {$/;"	s
pack_chs	src\utils\Pintos.pm	/^sub pack_chs {$/;"	s
read_fully	src\utils\Pintos.pm	/^sub read_fully {$/;"	s
read_loader	src\utils\Pintos.pm	/^sub read_loader {$/;"	s
read_mbr	src\utils\Pintos.pm	/^sub read_mbr {$/;"	s
read_partition_table	src\utils\Pintos.pm	/^sub read_partition_table {$/;"	s
round_up	src\utils\Pintos.pm	/^sub round_up {$/;"	s
set_align	src\utils\Pintos.pm	/^sub set_align {$/;"	s
set_geometry	src\utils\Pintos.pm	/^sub set_geometry {$/;"	s
set_part	src\utils\Pintos.pm	/^sub set_part {$/;"	s
write_fully	src\utils\Pintos.pm	/^sub write_fully {$/;"	s
write_zeros	src\utils\Pintos.pm	/^sub write_zeros {$/;"	s
main	src\utils\setitimer-helper.c	/^main (int argc, char *argv[]) $/;"	f
_GNU_SOURCE	src\utils\squish-pty.c	1;"	d	file:
dead_child_fd	src\utils\squish-pty.c	/^static int dead_child_fd;$/;"	v	file:
fail_io	src\utils\squish-pty.c	/^fail_io (const char *msg, ...)$/;"	f	file:
handle_error	src\utils\squish-pty.c	/^handle_error (ssize_t retval, int *fd, bool fd_is_pty, const char *call)$/;"	f	file:
main	src\utils\squish-pty.c	/^main (int argc __attribute__ ((unused)), char *argv[])$/;"	f
make_nonblocking	src\utils\squish-pty.c	/^make_nonblocking (int fd, bool nonblocking) $/;"	f	file:
make_noncanon	src\utils\squish-pty.c	/^make_noncanon (int fd, int vmin, int vtime)$/;"	f	file:
relay	src\utils\squish-pty.c	/^relay (int pty, int dead_child_fd) $/;"	f	file:
sigchld_handler	src\utils\squish-pty.c	/^sigchld_handler (int signo __attribute__ ((unused))) $/;"	f	file:
_GNU_SOURCE	src\utils\squish-unix.c	1;"	d	file:
fail_io	src\utils\squish-unix.c	/^fail_io (const char *msg, ...)$/;"	f	file:
handle_error	src\utils\squish-unix.c	/^handle_error (ssize_t retval, int *fd, bool fd_is_sock, const char *call)$/;"	f	file:
main	src\utils\squish-unix.c	/^main (int argc __attribute__ ((unused)), char *argv[])$/;"	f
make_nonblocking	src\utils\squish-unix.c	/^make_nonblocking (int fd, bool nonblocking) $/;"	f	file:
make_noncanon	src\utils\squish-unix.c	/^make_noncanon (int fd, int vmin, int vtime)$/;"	f	file:
relay	src\utils\squish-unix.c	/^relay (int sock) $/;"	f	file:
sigchld_handler	src\utils\squish-unix.c	/^sigchld_handler (int signo __attribute__ ((unused))) $/;"	f	file:
_end	src\vm\build\threads\kernel.lds.s	/^  _end = .;$/;"	d
_end_bss	src\vm\build\threads\kernel.lds.s	/^  _end_bss = .;$/;"	d
_end_kernel_text	src\vm\build\threads\kernel.lds.s	/^       _end_kernel_text = .; }$/;"	d
_signature	src\vm\build\threads\kernel.lds.s	/^     _signature = .; LONG(0xaa55aa55) }$/;"	d
_start	src\vm\build\threads\kernel.lds.s	/^  _start = 0xc0000000 + 0x20000;$/;"	d
_start_bss	src\vm\build\threads\kernel.lds.s	/^  _start_bss = .;$/;"	d
frame_get_pagedir	src\vm\frame.c	/^uint32_t* frame_get_pagedir(struct frame* f)$/;"	f
frame_get_use_bit	src\vm\frame.c	/^bool frame_get_use_bit(struct frame* f)$/;"	f
frame_get_vaddr	src\vm\frame.c	/^uint32_t* frame_get_vaddr(struct frame* f)$/;"	f
frame_get_valid	src\vm\frame.c	/^bool frame_get_valid (struct frame* f)$/;"	f
frame_set_pagedir	src\vm\frame.c	/^void frame_set_pagedir (struct frame* f, uint32_t * pagedir)$/;"	f
frame_set_use_bit	src\vm\frame.c	/^void frame_set_use_bit (struct frame* f, bool use_bit)$/;"	f
frame_set_vaddr	src\vm\frame.c	/^void frame_set_vaddr (struct frame* f, uint32_t* vaddr)$/;"	f
frame_set_valid	src\vm\frame.c	/^void frame_set_valid  (struct frame* f, bool valid)$/;"	f
frame_table_init	src\vm\frame.c	/^void frame_table_init()$/;"	f
FRAME_TABLE_SIZE	src\vm\frame.h	6;"	d
VM_FRAME_H	src\vm\frame.h	2;"	d
frame	src\vm\frame.h	/^struct frame {$/;"	s
frame_table	src\vm\frame.h	/^struct frame *frame_table;$/;"	v	typeref:struct:frame
pagedir	src\vm\frame.h	/^	uint32_t * pagedir;$/;"	m	struct:frame
use_bit	src\vm\frame.h	/^	bool use_bit;$/;"	m	struct:frame
vaddr	src\vm\frame.h	/^	uint32_t * vaddr;$/;"	m	struct:frame
valid	src\vm\frame.h	/^	bool valid;$/;"	m	struct:frame
VM_PAGE_H	src\vm\page.h	2;"	d
VM_SWAP_H	src\vm\swap.h	2;"	d
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
